// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-K87RABG
// DateTime: 13.10.2023 16:33:34
// UserName: under
// Input file <C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y - 13.10.2023 16:33:32>

// options: conflicts lines conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Parser
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,INTEGER_LITERAL=5,REAL_LITERAL=6,
    CHAR_LITERAL=7,STRING_LITERAL=8,TRUE=9,FALSE=10,IF=11,FOREACH=12,
    FROM=13,END=14,FOR=15,LOOP=16,VAR=17,IS=18,
    TYPE=19,RECORD=20,ARRAY=21,WHILE=22,IN=23,REVERSE=24,
    THEN=25,ELSE=26,ROUTINE=27,INTEGER=28,REAL=29,CHAR=30,
    BOOLEAN=31,INTEGER_REF=32,REAL_REF=33,CHAR_REF=34,BOOLEAN_REF=35,DOT=36,
    COMMA=37,COLON=38,SEMICOLON=39,ASSIGNMENT_OP=40,CLOSE_PARENTHESIS=41,OPEN_PARENTHESIS=42,
    CLOSE_BRACKET=43,OPEN_BRACKET=44,EQUAL=45,INCREMENT=46,DECREMENT=47,MINUS=48,
    PLUS=49,MULTIPLY=50,DIVIDE=51,MOD=52,LESS_EQUAL=53,GREATER_EQUAL=54,
    LESS=55,GREATER=56,NOT_EQUAL=57,AND=58,OR=59,XOR=60,
    RANGE=61};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<int, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[101];
  private static State[] states = new State[187];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "Declaration", "SimpleDeclaration", "RoutineDeclaration", 
      "VariableDeclaration", "TypeDeclaration", "TypeTail", "VariableInitializationTail", 
      "Type", "Expression", "Parameters", "Body", "ParameterDeclaration", "ParametersTail", 
      "PrimitiveType", "ArrayType", "RecordType", "RecordVariableDeclarations", 
      "Statement", "Assignment", "Increment", "Decrement", "RoutineCall", "WhileLoop", 
      "ForLoop", "ForeachLoop", "IfStatement", "ModifiablePrimary", "RoutineCallParameters", 
      "Expressions", "ExpressionsTail", "Range", "Reverse", "RangeExpression", 
      "ElseTail", "Relation", "ExpressionTail", "Simple", "RelationTail", "Factor", 
      "SimpleTail", "Summand", "FactorTail", "Primary", "ModifiablePrimaryTail", 
      "MemberAccess", "ArrayAccess", };

  static Parser() {
    states[0] = new State(new int[]{17,6,19,102,27,107},new int[]{-1,1,-3,186,-4,4,-6,5,-7,101,-5,106});
    states[1] = new State(new int[]{3,2,17,6,19,102,27,107},new int[]{-3,3,-4,4,-6,5,-7,101,-5,106});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-6);
    states[6] = new State(new int[]{4,7});
    states[7] = new State(new int[]{38,78},new int[]{-8,8});
    states[8] = new State(new int[]{18,10},new int[]{-9,9});
    states[9] = new State(-8);
    states[10] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-11,11,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[11] = new State(-10);
    states[12] = new State(new int[]{58,14,59,17,60,20,3,-65,17,-65,19,-65,27,-65,14,-65,4,-65,22,-65,15,-65,12,-65,11,-65,26,-65,43,-65,41,-65,39,-65,37,-65,16,-65,25,-65,61,-65},new int[]{-38,13});
    states[13] = new State(-64);
    states[14] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-37,15,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[15] = new State(new int[]{58,14,59,17,60,20,3,-65,17,-65,19,-65,27,-65,14,-65,4,-65,22,-65,15,-65,12,-65,11,-65,26,-65,43,-65,41,-65,39,-65,37,-65,16,-65,25,-65,61,-65},new int[]{-38,16});
    states[16] = new State(-66);
    states[17] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-37,18,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[18] = new State(new int[]{58,14,59,17,60,20,3,-65,17,-65,19,-65,27,-65,14,-65,4,-65,22,-65,15,-65,12,-65,11,-65,26,-65,43,-65,41,-65,39,-65,37,-65,16,-65,25,-65,61,-65},new int[]{-38,19});
    states[19] = new State(-67);
    states[20] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-37,21,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[21] = new State(new int[]{58,14,59,17,60,20,3,-65,17,-65,19,-65,27,-65,14,-65,4,-65,22,-65,15,-65,12,-65,11,-65,26,-65,43,-65,41,-65,39,-65,37,-65,16,-65,25,-65,61,-65},new int[]{-38,22});
    states[22] = new State(-68);
    states[23] = new State(new int[]{55,25,53,68,56,70,54,72,45,74,57,76,58,-70,59,-70,60,-70,3,-70,17,-70,19,-70,27,-70,14,-70,4,-70,22,-70,15,-70,12,-70,11,-70,26,-70,43,-70,41,-70,39,-70,37,-70,16,-70,25,-70,61,-70},new int[]{-40,24});
    states[24] = new State(-69);
    states[25] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-39,26,-41,27,-43,38,-45,46,-29,53});
    states[26] = new State(-71);
    states[27] = new State(new int[]{50,29,51,32,52,35,55,-78,53,-78,56,-78,54,-78,45,-78,57,-78,58,-78,59,-78,60,-78,3,-78,17,-78,19,-78,27,-78,14,-78,4,-78,22,-78,15,-78,12,-78,11,-78,26,-78,43,-78,41,-78,39,-78,37,-78,16,-78,25,-78,61,-78},new int[]{-42,28});
    states[28] = new State(-77);
    states[29] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-41,30,-43,38,-45,46,-29,53});
    states[30] = new State(new int[]{50,29,51,32,52,35,55,-78,53,-78,56,-78,54,-78,45,-78,57,-78,58,-78,59,-78,60,-78,3,-78,17,-78,19,-78,27,-78,14,-78,4,-78,22,-78,15,-78,12,-78,11,-78,26,-78,43,-78,41,-78,39,-78,37,-78,16,-78,25,-78,61,-78},new int[]{-42,31});
    states[31] = new State(-79);
    states[32] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-41,33,-43,38,-45,46,-29,53});
    states[33] = new State(new int[]{50,29,51,32,52,35,55,-78,53,-78,56,-78,54,-78,45,-78,57,-78,58,-78,59,-78,60,-78,3,-78,17,-78,19,-78,27,-78,14,-78,4,-78,22,-78,15,-78,12,-78,11,-78,26,-78,43,-78,41,-78,39,-78,37,-78,16,-78,25,-78,61,-78},new int[]{-42,34});
    states[34] = new State(-80);
    states[35] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-41,36,-43,38,-45,46,-29,53});
    states[36] = new State(new int[]{50,29,51,32,52,35,55,-78,53,-78,56,-78,54,-78,45,-78,57,-78,58,-78,59,-78,60,-78,3,-78,17,-78,19,-78,27,-78,14,-78,4,-78,22,-78,15,-78,12,-78,11,-78,26,-78,43,-78,41,-78,39,-78,37,-78,16,-78,25,-78,61,-78},new int[]{-42,37});
    states[37] = new State(-81);
    states[38] = new State(new int[]{49,40,48,43,50,-83,51,-83,52,-83,55,-83,53,-83,56,-83,54,-83,45,-83,57,-83,58,-83,59,-83,60,-83,3,-83,17,-83,19,-83,27,-83,14,-83,4,-83,22,-83,15,-83,12,-83,11,-83,26,-83,43,-83,41,-83,39,-83,37,-83,16,-83,25,-83,61,-83},new int[]{-44,39});
    states[39] = new State(-82);
    states[40] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-43,41,-45,46,-29,53});
    states[41] = new State(new int[]{49,40,48,43,50,-83,51,-83,52,-83,55,-83,53,-83,56,-83,54,-83,45,-83,57,-83,58,-83,59,-83,60,-83,3,-83,17,-83,19,-83,27,-83,14,-83,4,-83,22,-83,15,-83,12,-83,11,-83,26,-83,43,-83,41,-83,39,-83,37,-83,16,-83,25,-83,61,-83},new int[]{-44,42});
    states[42] = new State(-84);
    states[43] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-43,44,-45,46,-29,53});
    states[44] = new State(new int[]{49,40,48,43,50,-83,51,-83,52,-83,55,-83,53,-83,56,-83,54,-83,45,-83,57,-83,58,-83,59,-83,60,-83,3,-83,17,-83,19,-83,27,-83,14,-83,4,-83,22,-83,15,-83,12,-83,11,-83,26,-83,43,-83,41,-83,39,-83,37,-83,16,-83,25,-83,61,-83},new int[]{-44,45});
    states[45] = new State(-85);
    states[46] = new State(-86);
    states[47] = new State(-88);
    states[48] = new State(-89);
    states[49] = new State(-90);
    states[50] = new State(-91);
    states[51] = new State(-92);
    states[52] = new State(-93);
    states[53] = new State(-94);
    states[54] = new State(new int[]{36,58,44,62,49,-96,48,-96,50,-96,51,-96,52,-96,55,-96,53,-96,56,-96,54,-96,45,-96,57,-96,58,-96,59,-96,60,-96,3,-96,17,-96,19,-96,27,-96,14,-96,4,-96,22,-96,15,-96,12,-96,11,-96,26,-96,43,-96,41,-96,39,-96,37,-96,16,-96,25,-96,61,-96},new int[]{-46,55,-47,56,-48,60});
    states[55] = new State(-95);
    states[56] = new State(new int[]{36,58,44,62,49,-96,48,-96,50,-96,51,-96,52,-96,55,-96,53,-96,56,-96,54,-96,45,-96,57,-96,58,-96,59,-96,60,-96,3,-96,17,-96,19,-96,27,-96,14,-96,4,-96,22,-96,15,-96,12,-96,11,-96,26,-96,43,-96,41,-96,39,-96,37,-96,16,-96,25,-96,61,-96,40,-96},new int[]{-46,57,-47,56,-48,60});
    states[57] = new State(-97);
    states[58] = new State(new int[]{4,59});
    states[59] = new State(-99);
    states[60] = new State(new int[]{36,58,44,62,49,-96,48,-96,50,-96,51,-96,52,-96,55,-96,53,-96,56,-96,54,-96,45,-96,57,-96,58,-96,59,-96,60,-96,3,-96,17,-96,19,-96,27,-96,14,-96,4,-96,22,-96,15,-96,12,-96,11,-96,26,-96,43,-96,41,-96,39,-96,37,-96,16,-96,25,-96,61,-96,40,-96},new int[]{-46,61,-47,56,-48,60});
    states[61] = new State(-98);
    states[62] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-11,63,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[63] = new State(new int[]{43,64});
    states[64] = new State(-100);
    states[65] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-11,66,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[66] = new State(new int[]{41,67});
    states[67] = new State(-87);
    states[68] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-39,69,-41,27,-43,38,-45,46,-29,53});
    states[69] = new State(-72);
    states[70] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-39,71,-41,27,-43,38,-45,46,-29,53});
    states[71] = new State(-73);
    states[72] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-39,73,-41,27,-43,38,-45,46,-29,53});
    states[73] = new State(-74);
    states[74] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-39,75,-41,27,-43,38,-45,46,-29,53});
    states[75] = new State(-75);
    states[76] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-39,77,-41,27,-43,38,-45,46,-29,53});
    states[77] = new State(-76);
    states[78] = new State(new int[]{28,81,29,82,31,83,30,84,32,85,33,86,35,87,34,88,21,90,20,96,4,100},new int[]{-10,79,-16,80,-17,89,-18,95});
    states[79] = new State(-9);
    states[80] = new State(-18);
    states[81] = new State(-22);
    states[82] = new State(-23);
    states[83] = new State(-24);
    states[84] = new State(-25);
    states[85] = new State(-26);
    states[86] = new State(-27);
    states[87] = new State(-28);
    states[88] = new State(-29);
    states[89] = new State(-19);
    states[90] = new State(new int[]{44,91});
    states[91] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-11,92,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[92] = new State(new int[]{43,93});
    states[93] = new State(new int[]{28,81,29,82,31,83,30,84,32,85,33,86,35,87,34,88,21,90,20,96,4,100},new int[]{-10,94,-16,80,-17,89,-18,95});
    states[94] = new State(-30);
    states[95] = new State(-20);
    states[96] = new State(-32,new int[]{-19,97});
    states[97] = new State(new int[]{14,98,17,6},new int[]{-6,99});
    states[98] = new State(-31);
    states[99] = new State(-33);
    states[100] = new State(-21);
    states[101] = new State(-7);
    states[102] = new State(new int[]{4,103});
    states[103] = new State(new int[]{18,104});
    states[104] = new State(new int[]{28,81,29,82,31,83,30,84,32,85,33,86,35,87,34,88,21,90,20,96,4,100},new int[]{-10,105,-16,80,-17,89,-18,95});
    states[105] = new State(-11);
    states[106] = new State(-5);
    states[107] = new State(new int[]{4,108});
    states[108] = new State(new int[]{42,109});
    states[109] = new State(new int[]{4,183,41,-13},new int[]{-12,110,-14,178});
    states[110] = new State(new int[]{41,111});
    states[111] = new State(new int[]{38,78},new int[]{-8,112});
    states[112] = new State(new int[]{18,113});
    states[113] = new State(-34,new int[]{-13,114});
    states[114] = new State(new int[]{14,115,17,6,19,102,4,123,22,142,15,148,12,155,11,163},new int[]{-4,116,-20,117,-6,5,-7,101,-21,118,-29,120,-22,135,-23,137,-24,139,-25,141,-26,147,-27,154,-28,162});
    states[115] = new State(-12);
    states[116] = new State(-35);
    states[117] = new State(-36);
    states[118] = new State(new int[]{39,119});
    states[119] = new State(-37);
    states[120] = new State(new int[]{40,121});
    states[121] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-11,122,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[122] = new State(-45);
    states[123] = new State(new int[]{46,124,47,125,36,58,44,62,42,127,40,-96,39,-49},new int[]{-46,55,-30,126,-47,56,-48,60});
    states[124] = new State(-46);
    states[125] = new State(-47);
    states[126] = new State(-48);
    states[127] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-31,128,-11,130,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[128] = new State(new int[]{41,129});
    states[129] = new State(-50);
    states[130] = new State(new int[]{37,132,41,-52},new int[]{-32,131});
    states[131] = new State(-51);
    states[132] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-11,133,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[133] = new State(new int[]{37,132,41,-52},new int[]{-32,134});
    states[134] = new State(-53);
    states[135] = new State(new int[]{39,136});
    states[136] = new State(-38);
    states[137] = new State(new int[]{39,138});
    states[138] = new State(-39);
    states[139] = new State(new int[]{39,140});
    states[140] = new State(-40);
    states[141] = new State(-41);
    states[142] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-11,143,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[143] = new State(new int[]{16,144});
    states[144] = new State(-34,new int[]{-13,145});
    states[145] = new State(new int[]{14,146,17,6,19,102,4,123,22,142,15,148,12,155,11,163},new int[]{-4,116,-20,117,-6,5,-7,101,-21,118,-29,120,-22,135,-23,137,-24,139,-25,141,-26,147,-27,154,-28,162});
    states[146] = new State(-54);
    states[147] = new State(-42);
    states[148] = new State(new int[]{4,149});
    states[149] = new State(new int[]{23,171},new int[]{-33,150});
    states[150] = new State(new int[]{16,151});
    states[151] = new State(-34,new int[]{-13,152});
    states[152] = new State(new int[]{14,153,17,6,19,102,4,123,22,142,15,148,12,155,11,163},new int[]{-4,116,-20,117,-6,5,-7,101,-21,118,-29,120,-22,135,-23,137,-24,139,-25,141,-26,147,-27,154,-28,162});
    states[153] = new State(-55);
    states[154] = new State(-43);
    states[155] = new State(new int[]{4,156});
    states[156] = new State(new int[]{13,157});
    states[157] = new State(new int[]{4,54},new int[]{-29,158});
    states[158] = new State(new int[]{16,159});
    states[159] = new State(-34,new int[]{-13,160});
    states[160] = new State(new int[]{14,161,17,6,19,102,4,123,22,142,15,148,12,155,11,163},new int[]{-4,116,-20,117,-6,5,-7,101,-21,118,-29,120,-22,135,-23,137,-24,139,-25,141,-26,147,-27,154,-28,162});
    states[161] = new State(-60);
    states[162] = new State(-44);
    states[163] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-11,164,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[164] = new State(new int[]{25,165});
    states[165] = new State(-34,new int[]{-13,166});
    states[166] = new State(new int[]{26,169,17,6,19,102,4,123,22,142,15,148,12,155,11,163,14,-62},new int[]{-36,167,-4,116,-20,117,-6,5,-7,101,-21,118,-29,120,-22,135,-23,137,-24,139,-25,141,-26,147,-27,154,-28,162});
    states[167] = new State(new int[]{14,168});
    states[168] = new State(-61);
    states[169] = new State(-34,new int[]{-13,170});
    states[170] = new State(new int[]{17,6,19,102,4,123,22,142,15,148,12,155,11,163,14,-63},new int[]{-4,116,-20,117,-6,5,-7,101,-21,118,-29,120,-22,135,-23,137,-24,139,-25,141,-26,147,-27,154,-28,162});
    states[171] = new State(new int[]{24,177,5,-57,6,-57,7,-57,8,-57,9,-57,10,-57,4,-57,42,-57},new int[]{-34,172});
    states[172] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-35,173,-11,174,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[173] = new State(-56);
    states[174] = new State(new int[]{61,175});
    states[175] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,42,65},new int[]{-11,176,-37,12,-39,23,-41,27,-43,38,-45,46,-29,53});
    states[176] = new State(-59);
    states[177] = new State(-58);
    states[178] = new State(new int[]{37,180,41,-15},new int[]{-15,179});
    states[179] = new State(-14);
    states[180] = new State(new int[]{4,183},new int[]{-14,181});
    states[181] = new State(new int[]{37,180,41,-15},new int[]{-15,182});
    states[182] = new State(-16);
    states[183] = new State(new int[]{38,184});
    states[184] = new State(new int[]{28,81,29,82,31,83,30,84,32,85,33,86,35,87,34,88,21,90,20,96,4,100},new int[]{-10,185,-16,80,-17,89,-18,95});
    states[185] = new State(-17);
    states[186] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-1,-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-6});
    rules[7] = new Rule(-4, new int[]{-7});
    rules[8] = new Rule(-6, new int[]{17,4,-8,-9});
    rules[9] = new Rule(-8, new int[]{38,-10});
    rules[10] = new Rule(-9, new int[]{18,-11});
    rules[11] = new Rule(-7, new int[]{19,4,18,-10});
    rules[12] = new Rule(-5, new int[]{27,4,42,-12,41,-8,18,-13,14});
    rules[13] = new Rule(-12, new int[]{});
    rules[14] = new Rule(-12, new int[]{-14,-15});
    rules[15] = new Rule(-15, new int[]{});
    rules[16] = new Rule(-15, new int[]{37,-14,-15});
    rules[17] = new Rule(-14, new int[]{4,38,-10});
    rules[18] = new Rule(-10, new int[]{-16});
    rules[19] = new Rule(-10, new int[]{-17});
    rules[20] = new Rule(-10, new int[]{-18});
    rules[21] = new Rule(-10, new int[]{4});
    rules[22] = new Rule(-16, new int[]{28});
    rules[23] = new Rule(-16, new int[]{29});
    rules[24] = new Rule(-16, new int[]{31});
    rules[25] = new Rule(-16, new int[]{30});
    rules[26] = new Rule(-16, new int[]{32});
    rules[27] = new Rule(-16, new int[]{33});
    rules[28] = new Rule(-16, new int[]{35});
    rules[29] = new Rule(-16, new int[]{34});
    rules[30] = new Rule(-17, new int[]{21,44,-11,43,-10});
    rules[31] = new Rule(-18, new int[]{20,-19,14});
    rules[32] = new Rule(-19, new int[]{});
    rules[33] = new Rule(-19, new int[]{-19,-6});
    rules[34] = new Rule(-13, new int[]{});
    rules[35] = new Rule(-13, new int[]{-13,-4});
    rules[36] = new Rule(-13, new int[]{-13,-20});
    rules[37] = new Rule(-20, new int[]{-21,39});
    rules[38] = new Rule(-20, new int[]{-22,39});
    rules[39] = new Rule(-20, new int[]{-23,39});
    rules[40] = new Rule(-20, new int[]{-24,39});
    rules[41] = new Rule(-20, new int[]{-25});
    rules[42] = new Rule(-20, new int[]{-26});
    rules[43] = new Rule(-20, new int[]{-27});
    rules[44] = new Rule(-20, new int[]{-28});
    rules[45] = new Rule(-21, new int[]{-29,40,-11});
    rules[46] = new Rule(-22, new int[]{4,46});
    rules[47] = new Rule(-23, new int[]{4,47});
    rules[48] = new Rule(-24, new int[]{4,-30});
    rules[49] = new Rule(-30, new int[]{});
    rules[50] = new Rule(-30, new int[]{42,-31,41});
    rules[51] = new Rule(-31, new int[]{-11,-32});
    rules[52] = new Rule(-32, new int[]{});
    rules[53] = new Rule(-32, new int[]{37,-11,-32});
    rules[54] = new Rule(-25, new int[]{22,-11,16,-13,14});
    rules[55] = new Rule(-26, new int[]{15,4,-33,16,-13,14});
    rules[56] = new Rule(-33, new int[]{23,-34,-35});
    rules[57] = new Rule(-34, new int[]{});
    rules[58] = new Rule(-34, new int[]{24});
    rules[59] = new Rule(-35, new int[]{-11,61,-11});
    rules[60] = new Rule(-27, new int[]{12,4,13,-29,16,-13,14});
    rules[61] = new Rule(-28, new int[]{11,-11,25,-13,-36,14});
    rules[62] = new Rule(-36, new int[]{});
    rules[63] = new Rule(-36, new int[]{26,-13});
    rules[64] = new Rule(-11, new int[]{-37,-38});
    rules[65] = new Rule(-38, new int[]{});
    rules[66] = new Rule(-38, new int[]{58,-37,-38});
    rules[67] = new Rule(-38, new int[]{59,-37,-38});
    rules[68] = new Rule(-38, new int[]{60,-37,-38});
    rules[69] = new Rule(-37, new int[]{-39,-40});
    rules[70] = new Rule(-40, new int[]{});
    rules[71] = new Rule(-40, new int[]{55,-39});
    rules[72] = new Rule(-40, new int[]{53,-39});
    rules[73] = new Rule(-40, new int[]{56,-39});
    rules[74] = new Rule(-40, new int[]{54,-39});
    rules[75] = new Rule(-40, new int[]{45,-39});
    rules[76] = new Rule(-40, new int[]{57,-39});
    rules[77] = new Rule(-39, new int[]{-41,-42});
    rules[78] = new Rule(-42, new int[]{});
    rules[79] = new Rule(-42, new int[]{50,-41,-42});
    rules[80] = new Rule(-42, new int[]{51,-41,-42});
    rules[81] = new Rule(-42, new int[]{52,-41,-42});
    rules[82] = new Rule(-41, new int[]{-43,-44});
    rules[83] = new Rule(-44, new int[]{});
    rules[84] = new Rule(-44, new int[]{49,-43,-44});
    rules[85] = new Rule(-44, new int[]{48,-43,-44});
    rules[86] = new Rule(-43, new int[]{-45});
    rules[87] = new Rule(-43, new int[]{42,-11,41});
    rules[88] = new Rule(-45, new int[]{5});
    rules[89] = new Rule(-45, new int[]{6});
    rules[90] = new Rule(-45, new int[]{7});
    rules[91] = new Rule(-45, new int[]{8});
    rules[92] = new Rule(-45, new int[]{9});
    rules[93] = new Rule(-45, new int[]{10});
    rules[94] = new Rule(-45, new int[]{-29});
    rules[95] = new Rule(-29, new int[]{4,-46});
    rules[96] = new Rule(-46, new int[]{});
    rules[97] = new Rule(-46, new int[]{-47,-46});
    rules[98] = new Rule(-46, new int[]{-48,-46});
    rules[99] = new Rule(-47, new int[]{36,4});
    rules[100] = new Rule(-48, new int[]{44,-11,43});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> Declaration
#line 87 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                          { CurrentSemanticValue = MakeProgram(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 3: // Program -> Program, Declaration
#line 88 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                          { CurrentSemanticValue = AddToProgram(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 4: // Declaration -> SimpleDeclaration
#line 93 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 5: // Declaration -> RoutineDeclaration
#line 94 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 6: // SimpleDeclaration -> VariableDeclaration
#line 98 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 7: // SimpleDeclaration -> TypeDeclaration
#line 99 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 8: // VariableDeclaration -> VAR, IDENTIFIER, TypeTail, VariableInitializationTail
#line 103 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                            { CurrentSemanticValue = MakeVariableDeclaration(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]) }
#line default
        break;
      case 9: // TypeTail -> COLON, Type
#line 108 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 10: // VariableInitializationTail -> IS, Expression
#line 113 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 11: // TypeDeclaration -> TYPE, IDENTIFIER, IS, Type
#line 118 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = MakeTypeDeclaration(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 12: // RoutineDeclaration -> ROUTINE, IDENTIFIER, OPEN_PARENTHESIS, Parameters, 
               //                       CLOSE_PARENTHESIS, TypeTail, IS, Body, END
#line 123 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                                                            { CurrentSemanticValue = MakeRoutineDeclaration(ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 13: // Parameters -> /* empty */
#line 128 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                            { CurrentSemanticValue = MakeParameters(); }
#line default
        break;
      case 14: // Parameters -> ParameterDeclaration, ParametersTail
#line 129 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                            { CurrentSemanticValue = MakeParameters(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 15: // ParametersTail -> /* empty */
#line 134 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                { CurrentSemanticValue = MakeParametersTail(); }
#line default
        break;
      case 16: // ParametersTail -> COMMA, ParameterDeclaration, ParametersTail
#line 135 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                { CurrentSemanticValue = AddToParametersTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 17: // ParameterDeclaration -> IDENTIFIER, COLON, Type
#line 140 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeParameterDeclaration(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 18: // Type -> PrimitiveType
#line 145 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 19: // Type -> ArrayType
#line 146 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 20: // Type -> RecordType
#line 147 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 21: // Type -> IDENTIFIER
#line 148 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 22: // PrimitiveType -> INTEGER
#line 153 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 23: // PrimitiveType -> REAL
#line 154 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 24: // PrimitiveType -> BOOLEAN
#line 155 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 25: // PrimitiveType -> CHAR
#line 156 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 26: // PrimitiveType -> INTEGER_REF
#line 157 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 27: // PrimitiveType -> REAL_REF
#line 158 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 28: // PrimitiveType -> BOOLEAN_REF
#line 159 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 29: // PrimitiveType -> CHAR_REF
#line 160 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 30: // ArrayType -> ARRAY, OPEN_BRACKET, Expression, CLOSE_BRACKET, Type
#line 165 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                        { CurrentSemanticValue = MakeArrayType(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 31: // RecordType -> RECORD, RecordVariableDeclarations, END
#line 170 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                            { CurrentSemanticValue = MakeRecordType(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 32: // RecordVariableDeclarations -> /* empty */
#line 175 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                        { CurrentSemanticValue = MakeVariableDeclarations(); }
#line default
        break;
      case 33: // RecordVariableDeclarations -> RecordVariableDeclarations, VariableDeclaration
#line 176 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                        { CurrentSemanticValue = AddToVariableDeclarations(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 34: // Body -> /* empty */
#line 181 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = MakeBody(); }
#line default
        break;
      case 35: // Body -> Body, SimpleDeclaration
#line 182 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = AddSimpleDeclarationToBody(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 36: // Body -> Body, Statement
#line 183 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = AddStatementToBody(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 37: // Statement -> Assignment, SEMICOLON
#line 188 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 38: // Statement -> Increment, SEMICOLON
#line 189 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 39: // Statement -> Decrement, SEMICOLON
#line 190 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 40: // Statement -> RoutineCall, SEMICOLON
#line 191 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 41: // Statement -> WhileLoop
#line 192 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 42: // Statement -> ForLoop
#line 193 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 43: // Statement -> ForeachLoop
#line 194 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 44: // Statement -> IfStatement
#line 195 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 45: // Assignment -> ModifiablePrimary, ASSIGNMENT_OP, Expression
#line 200 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                    { CurrentSemanticValue = MakeAssignment(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 46: // Increment -> IDENTIFIER, INCREMENT
#line 204 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeIncrement(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 47: // Decrement -> IDENTIFIER, DECREMENT
#line 208 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeDecrement(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 48: // RoutineCall -> IDENTIFIER, RoutineCallParameters
#line 213 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                        { CurrentSemanticValue = MakeRoutineCall(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 49: // RoutineCallParameters -> /* empty */
#line 218 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                        { CurrentSemanticValue = MakeRoutineCallParameters(); }
#line default
        break;
      case 50: // RoutineCallParameters -> OPEN_PARENTHESIS, Expressions, CLOSE_PARENTHESIS
#line 219 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                        { CurrentSemanticValue = MakeRoutineCallParameters(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 51: // Expressions -> Expression, ExpressionsTail
#line 224 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                    { CurrentSemanticValue = MakeExpressions(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 52: // ExpressionsTail -> /* empty */
#line 229 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                        { CurrentSemanticValue = MakeExpressionTail(); }
#line default
        break;
      case 53: // ExpressionsTail -> COMMA, Expression, ExpressionsTail
#line 230 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                        { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 54: // WhileLoop -> WHILE, Expression, LOOP, Body, END
#line 235 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                        { CurrentSemanticValue = MakeWhileLoop(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 55: // ForLoop -> FOR, IDENTIFIER, Range, LOOP, Body, END
#line 240 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                            { CurrentSemanticValue = MakeForLoop(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 56: // Range -> IN, Reverse, RangeExpression
#line 245 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                    { CurrentSemanticValue = MakeRange(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 57: // Reverse -> /* empty */
#line 250 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = NULL; }
#line default
        break;
      case 58: // Reverse -> REVERSE
#line 251 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 59: // RangeExpression -> Expression, RANGE, Expression
#line 256 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                    { CurrentSemanticValue = MakeRangeExpression(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 60: // ForeachLoop -> FOREACH, IDENTIFIER, FROM, ModifiablePrimary, LOOP, Body, END
#line 261 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                                { CurrentSemanticValue = MakeForEachLoop(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 61: // IfStatement -> IF, Expression, THEN, Body, ElseTail, END
#line 266 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                            { CurrentSemanticValue = MakeIfStatement(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 62: // ElseTail -> /* empty */
#line 271 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = NULL; }
#line default
        break;
      case 63: // ElseTail -> ELSE, Body
#line 272 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 64: // Expression -> Relation, ExpressionTail
#line 277 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 65: // ExpressionTail -> /* empty */
#line 282 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                  { CurrentSemanticValue = MakeExpressionTail(); }
#line default
        break;
      case 66: // ExpressionTail -> AND, Relation, ExpressionTail
#line 283 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                    { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 67: // ExpressionTail -> OR, Relation, ExpressionTail
#line 284 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                    { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 68: // ExpressionTail -> XOR, Relation, ExpressionTail
#line 285 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                    { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 69: // Relation -> Simple, RelationTail
#line 290 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                          { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 70: // RelationTail -> /* empty */
#line 295 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeRelationTail();       }
#line default
        break;
      case 71: // RelationTail -> LESS, Simple
#line 296 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 72: // RelationTail -> LESS_EQUAL, Simple
#line 297 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 73: // RelationTail -> GREATER, Simple
#line 298 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 74: // RelationTail -> GREATER_EQUAL, Simple
#line 299 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 75: // RelationTail -> EQUAL, Simple
#line 300 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 76: // RelationTail -> NOT_EQUAL, Simple
#line 301 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 77: // Simple -> Factor, SimpleTail
#line 306 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                        { CurrentSemanticValue = MakeSimple(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 78: // SimpleTail -> /* empty */
#line 311 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                    { CurrentSemanticValue = MakeSimpleTail();            }
#line default
        break;
      case 79: // SimpleTail -> MULTIPLY, Factor, SimpleTail
#line 312 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                    { CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 80: // SimpleTail -> DIVIDE, Factor, SimpleTail
#line 313 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                    { CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 81: // SimpleTail -> MOD, Factor, SimpleTail
#line 314 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                    { CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 82: // Factor -> Summand, FactorTail
#line 319 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                            { CurrentSemanticValue = MakeFactor(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 83: // FactorTail -> /* empty */
#line 324 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = MakeFactorTail(); }
#line default
        break;
      case 84: // FactorTail -> PLUS, Summand, FactorTail
#line 325 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = AddToFactorTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 85: // FactorTail -> MINUS, Summand, FactorTail
#line 326 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                { CurrentSemanticValue = AddToFactorTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 86: // Summand -> Primary
#line 331 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                    { CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 87: // Summand -> OPEN_PARENTHESIS, Expression, CLOSE_PARENTHESIS
#line 332 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                                    { CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 88: // Primary -> INTEGER_LITERAL
#line 337 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 89: // Primary -> REAL_LITERAL
#line 338 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 90: // Primary -> CHAR_LITERAL
#line 339 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 91: // Primary -> STRING_LITERAL
#line 340 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 92: // Primary -> TRUE
#line 341 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 93: // Primary -> FALSE
#line 342 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 94: // Primary -> ModifiablePrimary
#line 343 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 95: // ModifiablePrimary -> IDENTIFIER, ModifiablePrimaryTail
#line 348 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                        { CurrentSemanticValue = MakeModifiablePrimary(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 96: // ModifiablePrimaryTail -> /* empty */
#line 353 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                            { CurrentSemanticValue = MakeModifiablePrimaryTail(); }
#line default
        break;
      case 97: // ModifiablePrimaryTail -> MemberAccess, ModifiablePrimaryTail
#line 354 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                            { CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 98: // ModifiablePrimaryTail -> ArrayAccess, ModifiablePrimaryTail
#line 355 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                            { CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 99: // MemberAccess -> DOT, IDENTIFIER
#line 359 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                        { CurrentSemanticValue = MakeMemberAccess(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 100: // ArrayAccess -> OPEN_BRACKET, Expression, CLOSE_BRACKET
#line 363 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
                                            { CurrentSemanticValue = MakeArrayAccess(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 367 "C:\Users\under\Documents\GitHub\Pelmeni\PelmeniCompilers\PelmeniCompilers\grammar.y"
#line default
}
}
