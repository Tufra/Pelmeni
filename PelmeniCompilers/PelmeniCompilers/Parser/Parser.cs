// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-K87RABG
// DateTime: 16.10.2023 17:55:05
// UserName: under
// Input file <grammar.y - 16.10.2023 17:53:02>

// options: lines

using System.CodeDom.Compiler;
using System.Globalization;
using PelmeniCompilers.Models;
using PelmeniCompilers.ShiftReduceParser;

namespace PelmeniCompilers.Parser
{
    public enum Tokens
    {
        error = 2,
        EOF = 3,
        IDENTIFIER = 4,
        INTEGER_LITERAL = 5,
        REAL_LITERAL = 6,
        CHAR_LITERAL = 7,
        STRING_LITERAL = 8,
        TRUE = 9,
        FALSE = 10,
        IF = 11,
        FOREACH = 12,
        FROM = 13,
        END = 14,
        FOR = 15,
        LOOP = 16,
        VAR = 17,
        IS = 18,
        TYPE = 19,
        RECORD = 20,
        ARRAY = 21,
        WHILE = 22,
        IN = 23,
        REVERSE = 24,
        THEN = 25,
        ELSE = 26,
        ROUTINE = 27,
        REF = 28,
        INTEGER = 29,
        REAL = 30,
        CHAR = 31,
        BOOLEAN = 32,
        DOT = 33,
        COMMA = 34,
        COLON = 35,
        SEMICOLON = 36,
        ASSIGNMENT_OP = 37,
        CLOSE_PARENTHESIS = 38,
        OPEN_PARENTHESIS = 39,
        CLOSE_BRACKET = 40,
        OPEN_BRACKET = 41,
        EQUAL = 42,
        INCREMENT = 43,
        DECREMENT = 44,
        MINUS = 45,
        PLUS = 46,
        MULTIPLY = 47,
        DIVIDE = 48,
        MOD = 49,
        LESS_EQUAL = 50,
        GREATER_EQUAL = 51,
        LESS = 52,
        GREATER = 53,
        NOT_EQUAL = 54,
        AND = 55,
        OR = 56,
        XOR = 57,
        RANGE = 58
    };

    [GeneratedCode("Gardens Point Parser Generator", "1.5.2")]
    public partial class Parser : ShiftReduceParser<Node, LexLocation>
    {
#pragma warning disable 649
        private static Dictionary<int, string> aliases;
#pragma warning restore 649
        private static Rule[] rules = new Rule[100];
        private static State[] states = new State[186];

        private static string[] nonTerms = new string[]
        {
            "Program", "$accept", "Declaration", "SimpleDeclaration", "RoutineDeclaration",
            "VariableDeclaration", "TypeDeclaration", "TypeTail", "VariableInitializationTail",
            "Type", "Expression", "Parameters", "Body", "ParameterDeclaration", "ParametersTail",
            "PrimitiveType", "ArrayType", "RecordType", "RefType", "RecordVariableDeclarations",
            "Statement", "Assignment", "Increment", "Decrement", "RoutineCall", "WhileLoop",
            "ForLoop", "ForeachLoop", "IfStatement", "ModifiablePrimary", "RoutineCallParameters",
            "Expressions", "ExpressionsTail", "Range", "Reverse", "RangeExpression",
            "ElseTail", "Relation", "ExpressionTail", "Simple", "RelationTail", "Factor",
            "SimpleTail", "Summand", "FactorTail", "Primary", "ModifiablePrimaryTail",
            "MemberAccess", "ArrayAccess",
        };

        static Parser()
        {
            states[0] = new State(new int[] { 17, 6, 19, 101, 27, 106 },
                new int[] { -1, 1, -3, 185, -4, 4, -6, 5, -7, 100, -5, 105 });
            states[1] = new State(new int[] { 3, 2, 17, 6, 19, 101, 27, 106 },
                new int[] { -3, 3, -4, 4, -6, 5, -7, 100, -5, 105 });
            states[2] = new State(-1);
            states[3] = new State(-3);
            states[4] = new State(-4);
            states[5] = new State(-6);
            states[6] = new State(new int[] { 4, 7 });
            states[7] = new State(new int[] { 35, 78, 18, -9 }, new int[] { -8, 8 });
            states[8] = new State(new int[] { 18, 10 }, new int[] { -9, 9 });
            states[9] = new State(-8);
            states[10] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -11, 11, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[11] = new State(-11);
            states[12] =
                new State(
                    new int[]
                    {
                        55, 14, 56, 17, 57, 20, 3, -64, 17, -64, 19, -64, 27, -64, 14, -64, 4, -64, 22, -64, 15, -64,
                        12, -64, 11, -64, 26, -64, 40, -64, 38, -64, 36, -64, 34, -64, 16, -64, 25, -64, 58, -64
                    }, new int[] { -39, 13 });
            states[13] = new State(-63);
            states[14] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -38, 15, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[15] =
                new State(
                    new int[]
                    {
                        55, 14, 56, 17, 57, 20, 3, -64, 17, -64, 19, -64, 27, -64, 14, -64, 4, -64, 22, -64, 15, -64,
                        12, -64, 11, -64, 26, -64, 40, -64, 38, -64, 36, -64, 34, -64, 16, -64, 25, -64, 58, -64
                    }, new int[] { -39, 16 });
            states[16] = new State(-65);
            states[17] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -38, 18, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[18] =
                new State(
                    new int[]
                    {
                        55, 14, 56, 17, 57, 20, 3, -64, 17, -64, 19, -64, 27, -64, 14, -64, 4, -64, 22, -64, 15, -64,
                        12, -64, 11, -64, 26, -64, 40, -64, 38, -64, 36, -64, 34, -64, 16, -64, 25, -64, 58, -64
                    }, new int[] { -39, 19 });
            states[19] = new State(-66);
            states[20] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -38, 21, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[21] =
                new State(
                    new int[]
                    {
                        55, 14, 56, 17, 57, 20, 3, -64, 17, -64, 19, -64, 27, -64, 14, -64, 4, -64, 22, -64, 15, -64,
                        12, -64, 11, -64, 26, -64, 40, -64, 38, -64, 36, -64, 34, -64, 16, -64, 25, -64, 58, -64
                    }, new int[] { -39, 22 });
            states[22] = new State(-67);
            states[23] = new State(
                new int[]
                {
                    52, 25, 50, 68, 53, 70, 51, 72, 42, 74, 54, 76, 55, -69, 56, -69, 57, -69, 3, -69, 17, -69, 19, -69,
                    27, -69, 14, -69, 4, -69, 22, -69, 15, -69, 12, -69, 11, -69, 26, -69, 40, -69, 38, -69, 36, -69,
                    34, -69, 16, -69, 25, -69, 58, -69
                }, new int[] { -41, 24 });
            states[24] = new State(-68);
            states[25] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -40, 26, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[26] = new State(-70);
            states[27] = new State(
                new int[]
                {
                    47, 29, 48, 32, 49, 35, 52, -77, 50, -77, 53, -77, 51, -77, 42, -77, 54, -77, 55, -77, 56, -77, 57,
                    -77, 3, -77, 17, -77, 19, -77, 27, -77, 14, -77, 4, -77, 22, -77, 15, -77, 12, -77, 11, -77, 26,
                    -77, 40, -77, 38, -77, 36, -77, 34, -77, 16, -77, 25, -77, 58, -77
                }, new int[] { -43, 28 });
            states[28] = new State(-76);
            states[29] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -42, 30, -44, 38, -46, 46, -30, 53 });
            states[30] = new State(
                new int[]
                {
                    47, 29, 48, 32, 49, 35, 52, -77, 50, -77, 53, -77, 51, -77, 42, -77, 54, -77, 55, -77, 56, -77, 57,
                    -77, 3, -77, 17, -77, 19, -77, 27, -77, 14, -77, 4, -77, 22, -77, 15, -77, 12, -77, 11, -77, 26,
                    -77, 40, -77, 38, -77, 36, -77, 34, -77, 16, -77, 25, -77, 58, -77
                }, new int[] { -43, 31 });
            states[31] = new State(-78);
            states[32] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -42, 33, -44, 38, -46, 46, -30, 53 });
            states[33] = new State(
                new int[]
                {
                    47, 29, 48, 32, 49, 35, 52, -77, 50, -77, 53, -77, 51, -77, 42, -77, 54, -77, 55, -77, 56, -77, 57,
                    -77, 3, -77, 17, -77, 19, -77, 27, -77, 14, -77, 4, -77, 22, -77, 15, -77, 12, -77, 11, -77, 26,
                    -77, 40, -77, 38, -77, 36, -77, 34, -77, 16, -77, 25, -77, 58, -77
                }, new int[] { -43, 34 });
            states[34] = new State(-79);
            states[35] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -42, 36, -44, 38, -46, 46, -30, 53 });
            states[36] = new State(
                new int[]
                {
                    47, 29, 48, 32, 49, 35, 52, -77, 50, -77, 53, -77, 51, -77, 42, -77, 54, -77, 55, -77, 56, -77, 57,
                    -77, 3, -77, 17, -77, 19, -77, 27, -77, 14, -77, 4, -77, 22, -77, 15, -77, 12, -77, 11, -77, 26,
                    -77, 40, -77, 38, -77, 36, -77, 34, -77, 16, -77, 25, -77, 58, -77
                }, new int[] { -43, 37 });
            states[37] = new State(-80);
            states[38] = new State(
                new int[]
                {
                    46, 40, 45, 43, 47, -82, 48, -82, 49, -82, 52, -82, 50, -82, 53, -82, 51, -82, 42, -82, 54, -82, 55,
                    -82, 56, -82, 57, -82, 3, -82, 17, -82, 19, -82, 27, -82, 14, -82, 4, -82, 22, -82, 15, -82, 12,
                    -82, 11, -82, 26, -82, 40, -82, 38, -82, 36, -82, 34, -82, 16, -82, 25, -82, 58, -82
                }, new int[] { -45, 39 });
            states[39] = new State(-81);
            states[40] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -44, 41, -46, 46, -30, 53 });
            states[41] = new State(
                new int[]
                {
                    46, 40, 45, 43, 47, -82, 48, -82, 49, -82, 52, -82, 50, -82, 53, -82, 51, -82, 42, -82, 54, -82, 55,
                    -82, 56, -82, 57, -82, 3, -82, 17, -82, 19, -82, 27, -82, 14, -82, 4, -82, 22, -82, 15, -82, 12,
                    -82, 11, -82, 26, -82, 40, -82, 38, -82, 36, -82, 34, -82, 16, -82, 25, -82, 58, -82
                }, new int[] { -45, 42 });
            states[42] = new State(-83);
            states[43] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -44, 44, -46, 46, -30, 53 });
            states[44] = new State(
                new int[]
                {
                    46, 40, 45, 43, 47, -82, 48, -82, 49, -82, 52, -82, 50, -82, 53, -82, 51, -82, 42, -82, 54, -82, 55,
                    -82, 56, -82, 57, -82, 3, -82, 17, -82, 19, -82, 27, -82, 14, -82, 4, -82, 22, -82, 15, -82, 12,
                    -82, 11, -82, 26, -82, 40, -82, 38, -82, 36, -82, 34, -82, 16, -82, 25, -82, 58, -82
                }, new int[] { -45, 45 });
            states[45] = new State(-84);
            states[46] = new State(-85);
            states[47] = new State(-87);
            states[48] = new State(-88);
            states[49] = new State(-89);
            states[50] = new State(-90);
            states[51] = new State(-91);
            states[52] = new State(-92);
            states[53] = new State(-93);
            states[54] = new State(
                new int[]
                {
                    33, 58, 41, 62, 46, -95, 45, -95, 47, -95, 48, -95, 49, -95, 52, -95, 50, -95, 53, -95, 51, -95, 42,
                    -95, 54, -95, 55, -95, 56, -95, 57, -95, 3, -95, 17, -95, 19, -95, 27, -95, 14, -95, 4, -95, 22,
                    -95, 15, -95, 12, -95, 11, -95, 26, -95, 40, -95, 38, -95, 36, -95, 34, -95, 16, -95, 25, -95, 58,
                    -95
                }, new int[] { -47, 55, -48, 56, -49, 60 });
            states[55] = new State(-94);
            states[56] = new State(
                new int[]
                {
                    33, 58, 41, 62, 46, -95, 45, -95, 47, -95, 48, -95, 49, -95, 52, -95, 50, -95, 53, -95, 51, -95, 42,
                    -95, 54, -95, 55, -95, 56, -95, 57, -95, 3, -95, 17, -95, 19, -95, 27, -95, 14, -95, 4, -95, 22,
                    -95, 15, -95, 12, -95, 11, -95, 26, -95, 40, -95, 38, -95, 36, -95, 34, -95, 16, -95, 25, -95, 58,
                    -95, 37, -95
                }, new int[] { -47, 57, -48, 56, -49, 60 });
            states[57] = new State(-96);
            states[58] = new State(new int[] { 4, 59 });
            states[59] = new State(-98);
            states[60] = new State(
                new int[]
                {
                    33, 58, 41, 62, 46, -95, 45, -95, 47, -95, 48, -95, 49, -95, 52, -95, 50, -95, 53, -95, 51, -95, 42,
                    -95, 54, -95, 55, -95, 56, -95, 57, -95, 3, -95, 17, -95, 19, -95, 27, -95, 14, -95, 4, -95, 22,
                    -95, 15, -95, 12, -95, 11, -95, 26, -95, 40, -95, 38, -95, 36, -95, 34, -95, 16, -95, 25, -95, 58,
                    -95, 37, -95
                }, new int[] { -47, 61, -48, 56, -49, 60 });
            states[61] = new State(-97);
            states[62] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -11, 63, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[63] = new State(new int[] { 40, 64 });
            states[64] = new State(-99);
            states[65] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -11, 66, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[66] = new State(new int[] { 38, 67 });
            states[67] = new State(-86);
            states[68] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -40, 69, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[69] = new State(-71);
            states[70] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -40, 71, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[71] = new State(-72);
            states[72] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -40, 73, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[73] = new State(-73);
            states[74] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -40, 75, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[75] = new State(-74);
            states[76] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -40, 77, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[77] = new State(-75);
            states[78] = new State(new int[] { 29, 81, 30, 82, 32, 83, 31, 84, 21, 86, 20, 92, 28, 97, 4, 99 },
                new int[] { -10, 79, -16, 80, -17, 85, -18, 91, -19, 96 });
            states[79] = new State(-10);
            states[80] = new State(-19);
            states[81] = new State(-24);
            states[82] = new State(-25);
            states[83] = new State(-26);
            states[84] = new State(-27);
            states[85] = new State(-20);
            states[86] = new State(new int[] { 41, 87 });
            states[87] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -11, 88, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[88] = new State(new int[] { 40, 89 });
            states[89] = new State(new int[] { 29, 81, 30, 82, 32, 83, 31, 84, 21, 86, 20, 92, 28, 97, 4, 99 },
                new int[] { -10, 90, -16, 80, -17, 85, -18, 91, -19, 96 });
            states[90] = new State(-28);
            states[91] = new State(-21);
            states[92] = new State(-31, new int[] { -20, 93 });
            states[93] = new State(new int[] { 14, 94, 17, 6 }, new int[] { -6, 95 });
            states[94] = new State(-29);
            states[95] = new State(-32);
            states[96] = new State(-22);
            states[97] = new State(new int[] { 29, 81, 30, 82, 32, 83, 31, 84 }, new int[] { -16, 98 });
            states[98] = new State(-30);
            states[99] = new State(-23);
            states[100] = new State(-7);
            states[101] = new State(new int[] { 4, 102 });
            states[102] = new State(new int[] { 18, 103 });
            states[103] = new State(new int[] { 29, 81, 30, 82, 32, 83, 31, 84, 21, 86, 20, 92, 28, 97, 4, 99 },
                new int[] { -10, 104, -16, 80, -17, 85, -18, 91, -19, 96 });
            states[104] = new State(-12);
            states[105] = new State(-5);
            states[106] = new State(new int[] { 4, 107 });
            states[107] = new State(new int[] { 39, 108 });
            states[108] = new State(new int[] { 4, 182, 38, -14 }, new int[] { -12, 109, -14, 177 });
            states[109] = new State(new int[] { 38, 110 });
            states[110] = new State(new int[] { 35, 78, 18, -9 }, new int[] { -8, 111 });
            states[111] = new State(new int[] { 18, 112 });
            states[112] = new State(-33, new int[] { -13, 113 });
            states[113] = new State(new int[] { 14, 114, 17, 6, 19, 101, 4, 122, 22, 141, 15, 147, 12, 154, 11, 162 },
                new int[]
                {
                    -4, 115, -21, 116, -6, 5, -7, 100, -22, 117, -30, 119, -23, 134, -24, 136, -25, 138, -26, 140, -27,
                    146, -28, 153, -29, 161
                });
            states[114] = new State(-13);
            states[115] = new State(-34);
            states[116] = new State(-35);
            states[117] = new State(new int[] { 36, 118 });
            states[118] = new State(-36);
            states[119] = new State(new int[] { 37, 120 });
            states[120] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -11, 121, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[121] = new State(-44);
            states[122] = new State(new int[] { 43, 123, 44, 124, 33, 58, 41, 62, 39, 126, 37, -95, 36, -48 },
                new int[] { -47, 55, -31, 125, -48, 56, -49, 60 });
            states[123] = new State(-45);
            states[124] = new State(-46);
            states[125] = new State(-47);
            states[126] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -32, 127, -11, 129, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[127] = new State(new int[] { 38, 128 });
            states[128] = new State(-49);
            states[129] = new State(new int[] { 34, 131, 38, -51 }, new int[] { -33, 130 });
            states[130] = new State(-50);
            states[131] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -11, 132, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[132] = new State(new int[] { 34, 131, 38, -51 }, new int[] { -33, 133 });
            states[133] = new State(-52);
            states[134] = new State(new int[] { 36, 135 });
            states[135] = new State(-37);
            states[136] = new State(new int[] { 36, 137 });
            states[137] = new State(-38);
            states[138] = new State(new int[] { 36, 139 });
            states[139] = new State(-39);
            states[140] = new State(-40);
            states[141] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -11, 142, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[142] = new State(new int[] { 16, 143 });
            states[143] = new State(-33, new int[] { -13, 144 });
            states[144] = new State(new int[] { 14, 145, 17, 6, 19, 101, 4, 122, 22, 141, 15, 147, 12, 154, 11, 162 },
                new int[]
                {
                    -4, 115, -21, 116, -6, 5, -7, 100, -22, 117, -30, 119, -23, 134, -24, 136, -25, 138, -26, 140, -27,
                    146, -28, 153, -29, 161
                });
            states[145] = new State(-53);
            states[146] = new State(-41);
            states[147] = new State(new int[] { 4, 148 });
            states[148] = new State(new int[] { 23, 170 }, new int[] { -34, 149 });
            states[149] = new State(new int[] { 16, 150 });
            states[150] = new State(-33, new int[] { -13, 151 });
            states[151] = new State(new int[] { 14, 152, 17, 6, 19, 101, 4, 122, 22, 141, 15, 147, 12, 154, 11, 162 },
                new int[]
                {
                    -4, 115, -21, 116, -6, 5, -7, 100, -22, 117, -30, 119, -23, 134, -24, 136, -25, 138, -26, 140, -27,
                    146, -28, 153, -29, 161
                });
            states[152] = new State(-54);
            states[153] = new State(-42);
            states[154] = new State(new int[] { 4, 155 });
            states[155] = new State(new int[] { 13, 156 });
            states[156] = new State(new int[] { 4, 54 }, new int[] { -30, 157 });
            states[157] = new State(new int[] { 16, 158 });
            states[158] = new State(-33, new int[] { -13, 159 });
            states[159] = new State(new int[] { 14, 160, 17, 6, 19, 101, 4, 122, 22, 141, 15, 147, 12, 154, 11, 162 },
                new int[]
                {
                    -4, 115, -21, 116, -6, 5, -7, 100, -22, 117, -30, 119, -23, 134, -24, 136, -25, 138, -26, 140, -27,
                    146, -28, 153, -29, 161
                });
            states[160] = new State(-59);
            states[161] = new State(-43);
            states[162] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -11, 163, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[163] = new State(new int[] { 25, 164 });
            states[164] = new State(-33, new int[] { -13, 165 });
            states[165] = new State(
                new int[] { 26, 168, 17, 6, 19, 101, 4, 122, 22, 141, 15, 147, 12, 154, 11, 162, 14, -61 },
                new int[]
                {
                    -37, 166, -4, 115, -21, 116, -6, 5, -7, 100, -22, 117, -30, 119, -23, 134, -24, 136, -25, 138, -26,
                    140, -27, 146, -28, 153, -29, 161
                });
            states[166] = new State(new int[] { 14, 167 });
            states[167] = new State(-60);
            states[168] = new State(-33, new int[] { -13, 169 });
            states[169] = new State(new int[] { 17, 6, 19, 101, 4, 122, 22, 141, 15, 147, 12, 154, 11, 162, 14, -62 },
                new int[]
                {
                    -4, 115, -21, 116, -6, 5, -7, 100, -22, 117, -30, 119, -23, 134, -24, 136, -25, 138, -26, 140, -27,
                    146, -28, 153, -29, 161
                });
            states[170] =
                new State(new int[] { 24, 176, 5, -56, 6, -56, 7, -56, 8, -56, 9, -56, 10, -56, 4, -56, 39, -56 },
                    new int[] { -35, 171 });
            states[171] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -36, 172, -11, 173, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[172] = new State(-55);
            states[173] = new State(new int[] { 58, 174 });
            states[174] = new State(new int[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 39, 65 },
                new int[] { -11, 175, -38, 12, -40, 23, -42, 27, -44, 38, -46, 46, -30, 53 });
            states[175] = new State(-58);
            states[176] = new State(-57);
            states[177] = new State(new int[] { 34, 179, 38, -16 }, new int[] { -15, 178 });
            states[178] = new State(-15);
            states[179] = new State(new int[] { 4, 182 }, new int[] { -14, 180 });
            states[180] = new State(new int[] { 34, 179, 38, -16 }, new int[] { -15, 181 });
            states[181] = new State(-17);
            states[182] = new State(new int[] { 35, 183 });
            states[183] = new State(new int[] { 29, 81, 30, 82, 32, 83, 31, 84, 21, 86, 20, 92, 28, 97, 4, 99 },
                new int[] { -10, 184, -16, 80, -17, 85, -18, 91, -19, 96 });
            states[184] = new State(-18);
            states[185] = new State(-2);

            for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

            rules[1] = new Rule(-2, new int[] { -1, 3 });
            rules[2] = new Rule(-1, new int[] { -3 });
            rules[3] = new Rule(-1, new int[] { -1, -3 });
            rules[4] = new Rule(-3, new int[] { -4 });
            rules[5] = new Rule(-3, new int[] { -5 });
            rules[6] = new Rule(-4, new int[] { -6 });
            rules[7] = new Rule(-4, new int[] { -7 });
            rules[8] = new Rule(-6, new int[] { 17, 4, -8, -9 });
            rules[9] = new Rule(-8, new int[] { });
            rules[10] = new Rule(-8, new int[] { 35, -10 });
            rules[11] = new Rule(-9, new int[] { 18, -11 });
            rules[12] = new Rule(-7, new int[] { 19, 4, 18, -10 });
            rules[13] = new Rule(-5, new int[] { 27, 4, 39, -12, 38, -8, 18, -13, 14 });
            rules[14] = new Rule(-12, new int[] { });
            rules[15] = new Rule(-12, new int[] { -14, -15 });
            rules[16] = new Rule(-15, new int[] { });
            rules[17] = new Rule(-15, new int[] { 34, -14, -15 });
            rules[18] = new Rule(-14, new int[] { 4, 35, -10 });
            rules[19] = new Rule(-10, new int[] { -16 });
            rules[20] = new Rule(-10, new int[] { -17 });
            rules[21] = new Rule(-10, new int[] { -18 });
            rules[22] = new Rule(-10, new int[] { -19 });
            rules[23] = new Rule(-10, new int[] { 4 });
            rules[24] = new Rule(-16, new int[] { 29 });
            rules[25] = new Rule(-16, new int[] { 30 });
            rules[26] = new Rule(-16, new int[] { 32 });
            rules[27] = new Rule(-16, new int[] { 31 });
            rules[28] = new Rule(-17, new int[] { 21, 41, -11, 40, -10 });
            rules[29] = new Rule(-18, new int[] { 20, -20, 14 });
            rules[30] = new Rule(-19, new int[] { 28, -16 });
            rules[31] = new Rule(-20, new int[] { });
            rules[32] = new Rule(-20, new int[] { -20, -6 });
            rules[33] = new Rule(-13, new int[] { });
            rules[34] = new Rule(-13, new int[] { -13, -4 });
            rules[35] = new Rule(-13, new int[] { -13, -21 });
            rules[36] = new Rule(-21, new int[] { -22, 36 });
            rules[37] = new Rule(-21, new int[] { -23, 36 });
            rules[38] = new Rule(-21, new int[] { -24, 36 });
            rules[39] = new Rule(-21, new int[] { -25, 36 });
            rules[40] = new Rule(-21, new int[] { -26 });
            rules[41] = new Rule(-21, new int[] { -27 });
            rules[42] = new Rule(-21, new int[] { -28 });
            rules[43] = new Rule(-21, new int[] { -29 });
            rules[44] = new Rule(-22, new int[] { -30, 37, -11 });
            rules[45] = new Rule(-23, new int[] { 4, 43 });
            rules[46] = new Rule(-24, new int[] { 4, 44 });
            rules[47] = new Rule(-25, new int[] { 4, -31 });
            rules[48] = new Rule(-31, new int[] { });
            rules[49] = new Rule(-31, new int[] { 39, -32, 38 });
            rules[50] = new Rule(-32, new int[] { -11, -33 });
            rules[51] = new Rule(-33, new int[] { });
            rules[52] = new Rule(-33, new int[] { 34, -11, -33 });
            rules[53] = new Rule(-26, new int[] { 22, -11, 16, -13, 14 });
            rules[54] = new Rule(-27, new int[] { 15, 4, -34, 16, -13, 14 });
            rules[55] = new Rule(-34, new int[] { 23, -35, -36 });
            rules[56] = new Rule(-35, new int[] { });
            rules[57] = new Rule(-35, new int[] { 24 });
            rules[58] = new Rule(-36, new int[] { -11, 58, -11 });
            rules[59] = new Rule(-28, new int[] { 12, 4, 13, -30, 16, -13, 14 });
            rules[60] = new Rule(-29, new int[] { 11, -11, 25, -13, -37, 14 });
            rules[61] = new Rule(-37, new int[] { });
            rules[62] = new Rule(-37, new int[] { 26, -13 });
            rules[63] = new Rule(-11, new int[] { -38, -39 });
            rules[64] = new Rule(-39, new int[] { });
            rules[65] = new Rule(-39, new int[] { 55, -38, -39 });
            rules[66] = new Rule(-39, new int[] { 56, -38, -39 });
            rules[67] = new Rule(-39, new int[] { 57, -38, -39 });
            rules[68] = new Rule(-38, new int[] { -40, -41 });
            rules[69] = new Rule(-41, new int[] { });
            rules[70] = new Rule(-41, new int[] { 52, -40 });
            rules[71] = new Rule(-41, new int[] { 50, -40 });
            rules[72] = new Rule(-41, new int[] { 53, -40 });
            rules[73] = new Rule(-41, new int[] { 51, -40 });
            rules[74] = new Rule(-41, new int[] { 42, -40 });
            rules[75] = new Rule(-41, new int[] { 54, -40 });
            rules[76] = new Rule(-40, new int[] { -42, -43 });
            rules[77] = new Rule(-43, new int[] { });
            rules[78] = new Rule(-43, new int[] { 47, -42, -43 });
            rules[79] = new Rule(-43, new int[] { 48, -42, -43 });
            rules[80] = new Rule(-43, new int[] { 49, -42, -43 });
            rules[81] = new Rule(-42, new int[] { -44, -45 });
            rules[82] = new Rule(-45, new int[] { });
            rules[83] = new Rule(-45, new int[] { 46, -44, -45 });
            rules[84] = new Rule(-45, new int[] { 45, -44, -45 });
            rules[85] = new Rule(-44, new int[] { -46 });
            rules[86] = new Rule(-44, new int[] { 39, -11, 38 });
            rules[87] = new Rule(-46, new int[] { 5 });
            rules[88] = new Rule(-46, new int[] { 6 });
            rules[89] = new Rule(-46, new int[] { 7 });
            rules[90] = new Rule(-46, new int[] { 8 });
            rules[91] = new Rule(-46, new int[] { 9 });
            rules[92] = new Rule(-46, new int[] { 10 });
            rules[93] = new Rule(-46, new int[] { -30 });
            rules[94] = new Rule(-30, new int[] { 4, -47 });
            rules[95] = new Rule(-47, new int[] { });
            rules[96] = new Rule(-47, new int[] { -48, -47 });
            rules[97] = new Rule(-47, new int[] { -49, -47 });
            rules[98] = new Rule(-48, new int[] { 33, 4 });
            rules[99] = new Rule(-49, new int[] { 41, -11, 40 });
        }

        protected override void Initialize()
        {
            this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
            this.InitStates(states);
            this.InitRules(rules);
            this.InitNonTerminals(nonTerms);
        }

        protected override void DoAction(int action)
        {
#pragma warning disable 162, 1522
            switch (action)
            {
                case 2: // Program -> Declaration
#line 86 "grammar.y"
                {
                    CurrentSemanticValue = MakeProgram(ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 3: // Program -> Program, Declaration
#line 87 "grammar.y"
                {
                    CurrentSemanticValue =
                        AddToProgram(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 4: // Declaration -> SimpleDeclaration
#line 92 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 5: // Declaration -> RoutineDeclaration
#line 93 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 6: // SimpleDeclaration -> VariableDeclaration
#line 97 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 7: // SimpleDeclaration -> TypeDeclaration
#line 98 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 8: // VariableDeclaration -> VAR, IDENTIFIER, TypeTail, VariableInitializationTail
#line 102 "grammar.y"
                {
                    CurrentSemanticValue = MakeVariableDeclaration(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 9: // TypeTail -> /* empty */
#line 107 "grammar.y"
                {
                    CurrentSemanticValue = null;
                }
#line default
                    break;
                case 10: // TypeTail -> COLON, Type
#line 108 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 11: // VariableInitializationTail -> IS, Expression
#line 113 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 12: // TypeDeclaration -> TYPE, IDENTIFIER, IS, Type
#line 118 "grammar.y"
                {
                    CurrentSemanticValue = MakeTypeDeclaration(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 13: // RoutineDeclaration -> ROUTINE, IDENTIFIER, OPEN_PARENTHESIS, Parameters, 
                    //                       CLOSE_PARENTHESIS, TypeTail, IS, Body, END
#line 123 "grammar.y"
                {
                    CurrentSemanticValue = MakeRoutineDeclaration(ValueStack[ValueStack.Depth - 8],
                        ValueStack[ValueStack.Depth - 6], ValueStack[ValueStack.Depth - 4],
                        ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 14: // Parameters -> /* empty */
#line 128 "grammar.y"
                {
                    CurrentSemanticValue = MakeParameters();
                }
#line default
                    break;
                case 15: // Parameters -> ParameterDeclaration, ParametersTail
#line 129 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeParameters(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 16: // ParametersTail -> /* empty */
#line 134 "grammar.y"
                {
                    CurrentSemanticValue = MakeParametersTail();
                }
#line default
                    break;
                case 17: // ParametersTail -> COMMA, ParameterDeclaration, ParametersTail
#line 135 "grammar.y"
                {
                    CurrentSemanticValue = AddToParametersTail(ValueStack[ValueStack.Depth - 1],
                        ValueStack[ValueStack.Depth - 3]);
                }
#line default
                    break;
                case 18: // ParameterDeclaration -> IDENTIFIER, COLON, Type
#line 140 "grammar.y"
                {
                    CurrentSemanticValue = MakeParameterDeclaration(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 19: // Type -> PrimitiveType
#line 145 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 20: // Type -> ArrayType
#line 146 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 21: // Type -> RecordType
#line 147 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 22: // Type -> RefType
#line 148 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 23: // Type -> IDENTIFIER
#line 149 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 24: // PrimitiveType -> INTEGER
#line 154 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 25: // PrimitiveType -> REAL
#line 155 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 26: // PrimitiveType -> BOOLEAN
#line 156 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 27: // PrimitiveType -> CHAR
#line 157 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 28: // ArrayType -> ARRAY, OPEN_BRACKET, Expression, CLOSE_BRACKET, Type
#line 162 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeArrayType(ValueStack[ValueStack.Depth - 1], ValueStack[ValueStack.Depth - 3]);
                }
#line default
                    break;
                case 29: // RecordType -> RECORD, RecordVariableDeclarations, END
#line 167 "grammar.y"
                {
                    CurrentSemanticValue = MakeRecordType(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 30: // RefType -> REF, PrimitiveType
#line 171 "grammar.y"
                {
                    CurrentSemanticValue = MakeRef(ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 31: // RecordVariableDeclarations -> /* empty */
#line 176 "grammar.y"
                {
                    CurrentSemanticValue = MakeVariableDeclarations();
                }
#line default
                    break;
                case 32: // RecordVariableDeclarations -> RecordVariableDeclarations, VariableDeclaration
#line 177 "grammar.y"
                {
                    CurrentSemanticValue = AddToVariableDeclarations(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 33: // Body -> /* empty */
#line 182 "grammar.y"
                {
                    CurrentSemanticValue = MakeBody();
                }
#line default
                    break;
                case 34: // Body -> Body, SimpleDeclaration
#line 183 "grammar.y"
                {
                    CurrentSemanticValue = AddSimpleDeclarationToBody(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 35: // Body -> Body, Statement
#line 184 "grammar.y"
                {
                    CurrentSemanticValue = AddStatementToBody(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 36: // Statement -> Assignment, SEMICOLON
#line 189 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 2];
                }
#line default
                    break;
                case 37: // Statement -> Increment, SEMICOLON
#line 190 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 2];
                }
#line default
                    break;
                case 38: // Statement -> Decrement, SEMICOLON
#line 191 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 2];
                }
#line default
                    break;
                case 39: // Statement -> RoutineCall, SEMICOLON
#line 192 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 2];
                }
#line default
                    break;
                case 40: // Statement -> WhileLoop
#line 193 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 41: // Statement -> ForLoop
#line 194 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 42: // Statement -> ForeachLoop
#line 195 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 43: // Statement -> IfStatement
#line 196 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 44: // Assignment -> ModifiablePrimary, ASSIGNMENT_OP, Expression
#line 201 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeAssignment(ValueStack[ValueStack.Depth - 3], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 45: // Increment -> IDENTIFIER, INCREMENT
#line 205 "grammar.y"
                {
                    CurrentSemanticValue = MakeIncrement(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 46: // Decrement -> IDENTIFIER, DECREMENT
#line 209 "grammar.y"
                {
                    CurrentSemanticValue = MakeDecrement(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 47: // RoutineCall -> IDENTIFIER, RoutineCallParameters
#line 214 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRoutineCall(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 48: // RoutineCallParameters -> /* empty */
#line 219 "grammar.y"
                {
                    CurrentSemanticValue = MakeRoutineCallParameters();
                }
#line default
                    break;
                case 49: // RoutineCallParameters -> OPEN_PARENTHESIS, Expressions, CLOSE_PARENTHESIS
#line 220 "grammar.y"
                {
                    CurrentSemanticValue = MakeRoutineCallParameters(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 50: // Expressions -> Expression, ExpressionsTail
#line 225 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeExpressions(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 51: // ExpressionsTail -> /* empty */
#line 230 "grammar.y"
                {
                    CurrentSemanticValue = MakeExpressionTail();
                }
#line default
                    break;
                case 52: // ExpressionsTail -> COMMA, Expression, ExpressionsTail
#line 231 "grammar.y"
                {
                    CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth - 1],
                        ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 53: // WhileLoop -> WHILE, Expression, LOOP, Body, END
#line 236 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeWhileLoop(ValueStack[ValueStack.Depth - 4], ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 54: // ForLoop -> FOR, IDENTIFIER, Range, LOOP, Body, END
#line 241 "grammar.y"
                {
                    CurrentSemanticValue = MakeForLoop(ValueStack[ValueStack.Depth - 5],
                        ValueStack[ValueStack.Depth - 4], ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 55: // Range -> IN, Reverse, RangeExpression
#line 246 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRange(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 56: // Reverse -> /* empty */
#line 251 "grammar.y"
                {
                    CurrentSemanticValue = null;
                }
#line default
                    break;
                case 57: // Reverse -> REVERSE
#line 252 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 58: // RangeExpression -> Expression, RANGE, Expression
#line 257 "grammar.y"
                {
                    CurrentSemanticValue = MakeRangeExpression(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 59: // ForeachLoop -> FOREACH, IDENTIFIER, FROM, ModifiablePrimary, LOOP, Body, END
#line 262 "grammar.y"
                {
                    CurrentSemanticValue = MakeForEachLoop(ValueStack[ValueStack.Depth - 6],
                        ValueStack[ValueStack.Depth - 4], ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 60: // IfStatement -> IF, Expression, THEN, Body, ElseTail, END
#line 267 "grammar.y"
                {
                    CurrentSemanticValue = MakeIfStatement(ValueStack[ValueStack.Depth - 5],
                        ValueStack[ValueStack.Depth - 3], ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 61: // ElseTail -> /* empty */
#line 272 "grammar.y"
                {
                    CurrentSemanticValue = null;
                }
#line default
                    break;
                case 62: // ElseTail -> ELSE, Body
#line 273 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 63: // Expression -> Relation, ExpressionTail
#line 278 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeExpression(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 64: // ExpressionTail -> /* empty */
#line 283 "grammar.y"
                {
                    CurrentSemanticValue = MakeExpressionTail();
                }
#line default
                    break;
                case 65: // ExpressionTail -> AND, Relation, ExpressionTail
#line 284 "grammar.y"
                {
                    CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 66: // ExpressionTail -> OR, Relation, ExpressionTail
#line 285 "grammar.y"
                {
                    CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 67: // ExpressionTail -> XOR, Relation, ExpressionTail
#line 286 "grammar.y"
                {
                    CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 68: // Relation -> Simple, RelationTail
#line 291 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelation(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 69: // RelationTail -> /* empty */
#line 296 "grammar.y"
                {
                    CurrentSemanticValue = MakeRelationTail();
                }
#line default
                    break;
                case 70: // RelationTail -> LESS, Simple
#line 297 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 71: // RelationTail -> LESS_EQUAL, Simple
#line 298 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 72: // RelationTail -> GREATER, Simple
#line 299 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 73: // RelationTail -> GREATER_EQUAL, Simple
#line 300 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 74: // RelationTail -> EQUAL, Simple
#line 301 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 75: // RelationTail -> NOT_EQUAL, Simple
#line 302 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 76: // Simple -> Factor, SimpleTail
#line 307 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeSimple(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 77: // SimpleTail -> /* empty */
#line 312 "grammar.y"
                {
                    CurrentSemanticValue = MakeSimpleTail();
                }
#line default
                    break;
                case 78: // SimpleTail -> MULTIPLY, Factor, SimpleTail
#line 313 "grammar.y"
                {
                    CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 79: // SimpleTail -> DIVIDE, Factor, SimpleTail
#line 314 "grammar.y"
                {
                    CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 80: // SimpleTail -> MOD, Factor, SimpleTail
#line 315 "grammar.y"
                {
                    CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 81: // Factor -> Summand, FactorTail
#line 320 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeFactor(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 82: // FactorTail -> /* empty */
#line 325 "grammar.y"
                {
                    CurrentSemanticValue = MakeFactorTail();
                }
#line default
                    break;
                case 83: // FactorTail -> PLUS, Summand, FactorTail
#line 326 "grammar.y"
                {
                    CurrentSemanticValue = AddToFactorTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 84: // FactorTail -> MINUS, Summand, FactorTail
#line 327 "grammar.y"
                {
                    CurrentSemanticValue = AddToFactorTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 85: // Summand -> Primary
#line 332 "grammar.y"
                {
                    CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 86: // Summand -> OPEN_PARENTHESIS, Expression, CLOSE_PARENTHESIS
#line 333 "grammar.y"
                {
                    CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 87: // Primary -> INTEGER_LITERAL
#line 338 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 88: // Primary -> REAL_LITERAL
#line 339 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 89: // Primary -> CHAR_LITERAL
#line 340 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 90: // Primary -> STRING_LITERAL
#line 341 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 91: // Primary -> TRUE
#line 342 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 92: // Primary -> FALSE
#line 343 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 93: // Primary -> ModifiablePrimary
#line 344 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 94: // ModifiablePrimary -> IDENTIFIER, ModifiablePrimaryTail
#line 349 "grammar.y"
                {
                    CurrentSemanticValue = MakeModifiablePrimary(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 95: // ModifiablePrimaryTail -> /* empty */
#line 354 "grammar.y"
                {
                    CurrentSemanticValue = MakeModifiablePrimaryTail();
                }
#line default
                    break;
                case 96: // ModifiablePrimaryTail -> MemberAccess, ModifiablePrimaryTail
#line 355 "grammar.y"
                {
                    CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 97: // ModifiablePrimaryTail -> ArrayAccess, ModifiablePrimaryTail
#line 356 "grammar.y"
                {
                    CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 98: // MemberAccess -> DOT, IDENTIFIER
#line 360 "grammar.y"
                {
                    CurrentSemanticValue = MakeMemberAccess(ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 99: // ArrayAccess -> OPEN_BRACKET, Expression, CLOSE_BRACKET
#line 364 "grammar.y"
                {
                    CurrentSemanticValue = MakeArrayAccess(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
            }
#pragma warning restore 162, 1522
        }

        protected override string TerminalToString(int terminal)
        {
            if (aliases != null && aliases.ContainsKey(terminal))
                return aliases[terminal];
            else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
                return ((Tokens)terminal).ToString();
            else
                return CharToString((char)terminal);
        }

#line 368 "grammar.y"
#line default
    }
}