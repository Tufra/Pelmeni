// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-K87RABG
// DateTime: 05.11.2023 22:23:47
// UserName: under
// Input file <../grammar.y - 05.11.2023 22:23:15>

// options: conflicts lines conflicts

using System.CodeDom.Compiler;
using System.Globalization;
using PelmeniCompilers.Models;
using PelmeniCompilers.ShiftReduceParser;

namespace PelmeniCompilers.Parser
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,INTEGER_LITERAL=5,REAL_LITERAL=6,
    CHAR_LITERAL=7,STRING_LITERAL=8,TRUE=9,FALSE=10,IF=11,FOREACH=12,
    FROM=13,END=14,FOR=15,LOOP=16,VAR=17,IS=18,
    TYPE=19,RECORD=20,ARRAY=21,WHILE=22,IN=23,REVERSE=24,
    THEN=25,ELSE=26,ROUTINE=27,REF=28,RETURN=29,USE=30,
    MODULE=31,OPERATOR=32,INTEGER=33,REAL=34,CHAR=35,BOOLEAN=36,
    DOT=37,COMMA=38,COLON=39,SEMICOLON=40,ASSIGNMENT_OP=41,CLOSE_PARENTHESIS=42,
    OPEN_PARENTHESIS=43,CLOSE_BRACKET=44,OPEN_BRACKET=45,EQUAL=46,INCREMENT=47,DECREMENT=48,
    MINUS=49,PLUS=50,MULTIPLY=51,DIVIDE=52,MOD=53,LESS_EQUAL=54,
    GREATER_EQUAL=55,LESS=56,GREATER=57,NOT_EQUAL=58,NOT=59,AND=60,
    OR=61,XOR=62,RANGE=63};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[111];
  private static State[] states = new State[199];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "Module", "Imports", "Declaration", "SimpleDeclaration", 
      "RoutineDeclaration", "VariableDeclaration", "TypeDeclaration", "TypeTail", 
      "VariableInitializationTail", "IdentifiersTail", "Type", "Expression", 
      "Parameters", "Body", "ParameterDeclaration", "ParametersTail", "PrimitiveType", 
      "ArrayType", "RecordType", "RefType", "RecordVariableDeclarations", "Statement", 
      "Assignment", "Increment", "Decrement", "RoutineCall", "Return", "WhileLoop", 
      "ForLoop", "ForeachLoop", "IfStatement", "ModifiablePrimary", "RoutineCallParameters", 
      "Expressions", "ExpressionsTail", "Range", "Reverse", "RangeExpression", 
      "ElseTail", "OrExpression", "AndExpression", "Relation", "Factor", "Simple", 
      "Summand", "Sign", "Primary", "ModifiablePrimaryTail", "MemberAccess", 
      "ArrayAccess", };

  static Parser() {
    states[0] = new State(new int[]{31,196},new int[]{-1,1,-3,190});
    states[1] = new State(new int[]{3,2,17,6,19,111,27,117},new int[]{-5,3,-6,4,-8,5,-9,110,-7,116});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-7);
    states[5] = new State(-9);
    states[6] = new State(new int[]{4,7});
    states[7] = new State(new int[]{39,83,38,107,18,-15,40,-13},new int[]{-10,8,-12,80});
    states[8] = new State(new int[]{18,11,40,-17},new int[]{-11,9});
    states[9] = new State(new int[]{40,10});
    states[10] = new State(-11);
    states[11] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-14,12,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[12] = new State(-18);
    states[13] = new State(new int[]{61,14,40,-73,44,-73,42,-73,38,-73,16,-73,25,-73,63,-73});
    states[14] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-43,15,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[15] = new State(new int[]{60,16,61,-77,40,-77,44,-77,42,-77,38,-77,16,-77,25,-77,63,-77});
    states[16] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-44,17,-45,18,-46,21,-47,24,-48,27});
    states[17] = new State(-75);
    states[18] = new State(new int[]{56,19,54,70,57,72,55,74,46,76,58,78,60,-78,61,-78,40,-78,44,-78,42,-78,38,-78,16,-78,25,-78,63,-78});
    states[19] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-45,20,-46,21,-47,24,-48,27});
    states[20] = new State(-79);
    states[21] = new State(new int[]{50,22,49,68,56,-90,54,-90,57,-90,55,-90,46,-90,58,-90,60,-90,61,-90,40,-90,44,-90,42,-90,38,-90,16,-90,25,-90,63,-90});
    states[22] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-45,23,-46,21,-47,24,-48,27});
    states[23] = new State(-91);
    states[24] = new State(new int[]{51,25,52,64,53,66,50,-86,49,-86,56,-86,54,-86,57,-86,55,-86,46,-86,58,-86,60,-86,61,-86,40,-86,44,-86,42,-86,38,-86,16,-86,25,-86,63,-86});
    states[25] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-46,26,-47,24,-48,27});
    states[26] = new State(-87);
    states[27] = new State(new int[]{5,29,6,30,7,31,8,32,9,33,10,34,4,36},new int[]{-49,28,-34,35,-28,63});
    states[28] = new State(-93);
    states[29] = new State(-97);
    states[30] = new State(-98);
    states[31] = new State(-99);
    states[32] = new State(-100);
    states[33] = new State(-101);
    states[34] = new State(-102);
    states[35] = new State(-103);
    states[36] = new State(new int[]{43,54,37,-106,45,-106,51,-106,52,-106,53,-106,50,-106,49,-106,56,-106,54,-106,57,-106,55,-106,46,-106,58,-106,60,-106,61,-106,40,-106,44,-106,42,-106,38,-106,16,-106,25,-106,63,-106,41,-106,47,-106,48,-106},new int[]{-50,37,-35,53});
    states[37] = new State(new int[]{37,40,45,42,51,-105,52,-105,53,-105,50,-105,49,-105,56,-105,54,-105,57,-105,55,-105,46,-105,58,-105,60,-105,61,-105,40,-105,44,-105,42,-105,38,-105,16,-105,25,-105,63,-105,41,-105,47,-105,48,-105},new int[]{-51,38,-52,39});
    states[38] = new State(-107);
    states[39] = new State(-108);
    states[40] = new State(new int[]{4,41});
    states[41] = new State(-109);
    states[42] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-14,43,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[43] = new State(new int[]{44,44});
    states[44] = new State(-110);
    states[45] = new State(new int[]{60,16,61,-76,40,-76,44,-76,42,-76,38,-76,16,-76,25,-76,63,-76});
    states[46] = new State(-74);
    states[47] = new State(-96);
    states[48] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-14,49,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[49] = new State(new int[]{42,50});
    states[50] = new State(-94);
    states[51] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-44,52,-45,18,-46,21,-47,24,-48,27});
    states[52] = new State(-85);
    states[53] = new State(-56);
    states[54] = new State(new int[]{42,55,49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-36,56,-14,58,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[55] = new State(-58);
    states[56] = new State(new int[]{42,57});
    states[57] = new State(-59);
    states[58] = new State(new int[]{38,60,42,-61},new int[]{-37,59});
    states[59] = new State(-60);
    states[60] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-14,61,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[61] = new State(new int[]{38,60,42,-61},new int[]{-37,62});
    states[62] = new State(-62);
    states[63] = new State(-104);
    states[64] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-46,65,-47,24,-48,27});
    states[65] = new State(-88);
    states[66] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-46,67,-47,24,-48,27});
    states[67] = new State(-89);
    states[68] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-45,69,-46,21,-47,24,-48,27});
    states[69] = new State(-92);
    states[70] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-45,71,-46,21,-47,24,-48,27});
    states[71] = new State(-80);
    states[72] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-45,73,-46,21,-47,24,-48,27});
    states[73] = new State(-81);
    states[74] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-45,75,-46,21,-47,24,-48,27});
    states[75] = new State(-82);
    states[76] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-45,77,-46,21,-47,24,-48,27});
    states[77] = new State(-83);
    states[78] = new State(new int[]{49,47,43,48,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-45,79,-46,21,-47,24,-48,27});
    states[79] = new State(-84);
    states[80] = new State(new int[]{39,83,40,-15},new int[]{-10,81});
    states[81] = new State(new int[]{40,82});
    states[82] = new State(-12);
    states[83] = new State(new int[]{33,86,34,87,36,88,35,89,21,91,20,97,28,102,4,104},new int[]{-13,84,-19,85,-20,90,-21,96,-22,101});
    states[84] = new State(-16);
    states[85] = new State(-26);
    states[86] = new State(-31);
    states[87] = new State(-32);
    states[88] = new State(-33);
    states[89] = new State(-34);
    states[90] = new State(-27);
    states[91] = new State(new int[]{45,92});
    states[92] = new State(new int[]{44,105,49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-14,93,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[93] = new State(new int[]{44,94});
    states[94] = new State(new int[]{33,86,34,87,36,88,35,89,21,91,20,97,28,102,4,104},new int[]{-13,95,-19,85,-20,90,-21,96,-22,101});
    states[95] = new State(-35);
    states[96] = new State(-28);
    states[97] = new State(-39,new int[]{-23,98});
    states[98] = new State(new int[]{14,99,17,6},new int[]{-8,100});
    states[99] = new State(-37);
    states[100] = new State(-40);
    states[101] = new State(-29);
    states[102] = new State(new int[]{33,86,34,87,36,88,35,89},new int[]{-19,103});
    states[103] = new State(-38);
    states[104] = new State(-30);
    states[105] = new State(new int[]{33,86,34,87,36,88,35,89,21,91,20,97,28,102,4,104},new int[]{-13,106,-19,85,-20,90,-21,96,-22,101});
    states[106] = new State(-36);
    states[107] = new State(new int[]{4,108});
    states[108] = new State(new int[]{38,107,39,-13,40,-13},new int[]{-12,109});
    states[109] = new State(-14);
    states[110] = new State(-10);
    states[111] = new State(new int[]{4,112});
    states[112] = new State(new int[]{18,113});
    states[113] = new State(new int[]{33,86,34,87,36,88,35,89,21,91,20,97,28,102,4,104},new int[]{-13,114,-19,85,-20,90,-21,96,-22,101});
    states[114] = new State(new int[]{40,115});
    states[115] = new State(-19);
    states[116] = new State(-8);
    states[117] = new State(new int[]{4,118});
    states[118] = new State(new int[]{43,119});
    states[119] = new State(new int[]{4,188,42,-21},new int[]{-15,120,-17,183});
    states[120] = new State(new int[]{42,121});
    states[121] = new State(new int[]{39,83,18,-15},new int[]{-10,122});
    states[122] = new State(new int[]{18,123});
    states[123] = new State(-41,new int[]{-16,124});
    states[124] = new State(new int[]{14,125,17,6,19,111,4,36,29,143,22,146,15,152,12,159,11,167},new int[]{-6,126,-24,127,-8,5,-9,110,-25,128,-34,130,-26,135,-27,137,-28,139,-29,141,-30,145,-31,151,-32,158,-33,166});
    states[125] = new State(-20);
    states[126] = new State(-42);
    states[127] = new State(-43);
    states[128] = new State(new int[]{40,129});
    states[129] = new State(-44);
    states[130] = new State(new int[]{41,131,47,133,48,134});
    states[131] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-14,132,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[132] = new State(-53);
    states[133] = new State(-54);
    states[134] = new State(-55);
    states[135] = new State(new int[]{40,136});
    states[136] = new State(-45);
    states[137] = new State(new int[]{40,138});
    states[138] = new State(-46);
    states[139] = new State(new int[]{40,140});
    states[140] = new State(-47);
    states[141] = new State(new int[]{40,142});
    states[142] = new State(-48);
    states[143] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-14,144,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[144] = new State(-57);
    states[145] = new State(-49);
    states[146] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-14,147,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[147] = new State(new int[]{16,148});
    states[148] = new State(-41,new int[]{-16,149});
    states[149] = new State(new int[]{14,150,17,6,19,111,4,36,29,143,22,146,15,152,12,159,11,167},new int[]{-6,126,-24,127,-8,5,-9,110,-25,128,-34,130,-26,135,-27,137,-28,139,-29,141,-30,145,-31,151,-32,158,-33,166});
    states[150] = new State(-63);
    states[151] = new State(-50);
    states[152] = new State(new int[]{4,153});
    states[153] = new State(new int[]{23,176},new int[]{-38,154});
    states[154] = new State(new int[]{16,155});
    states[155] = new State(-41,new int[]{-16,156});
    states[156] = new State(new int[]{14,157,17,6,19,111,4,36,29,143,22,146,15,152,12,159,11,167},new int[]{-6,126,-24,127,-8,5,-9,110,-25,128,-34,130,-26,135,-27,137,-28,139,-29,141,-30,145,-31,151,-32,158,-33,166});
    states[157] = new State(-64);
    states[158] = new State(-51);
    states[159] = new State(new int[]{4,160});
    states[160] = new State(new int[]{13,161});
    states[161] = new State(new int[]{4,175},new int[]{-34,162});
    states[162] = new State(new int[]{16,163});
    states[163] = new State(-41,new int[]{-16,164});
    states[164] = new State(new int[]{14,165,17,6,19,111,4,36,29,143,22,146,15,152,12,159,11,167},new int[]{-6,126,-24,127,-8,5,-9,110,-25,128,-34,130,-26,135,-27,137,-28,139,-29,141,-30,145,-31,151,-32,158,-33,166});
    states[165] = new State(-69);
    states[166] = new State(-52);
    states[167] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-14,168,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[168] = new State(new int[]{25,169});
    states[169] = new State(-41,new int[]{-16,170});
    states[170] = new State(new int[]{26,173,17,6,19,111,4,36,29,143,22,146,15,152,12,159,11,167,14,-71},new int[]{-41,171,-6,126,-24,127,-8,5,-9,110,-25,128,-34,130,-26,135,-27,137,-28,139,-29,141,-30,145,-31,151,-32,158,-33,166});
    states[171] = new State(new int[]{14,172});
    states[172] = new State(-70);
    states[173] = new State(-41,new int[]{-16,174});
    states[174] = new State(new int[]{17,6,19,111,4,36,29,143,22,146,15,152,12,159,11,167,14,-72},new int[]{-6,126,-24,127,-8,5,-9,110,-25,128,-34,130,-26,135,-27,137,-28,139,-29,141,-30,145,-31,151,-32,158,-33,166});
    states[175] = new State(-106,new int[]{-50,37});
    states[176] = new State(new int[]{24,182,49,-66,43,-66,59,-66,5,-66,6,-66,7,-66,8,-66,9,-66,10,-66,4,-66},new int[]{-39,177});
    states[177] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-40,178,-14,179,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[178] = new State(-65);
    states[179] = new State(new int[]{63,180});
    states[180] = new State(new int[]{49,47,43,48,59,51,5,-95,6,-95,7,-95,8,-95,9,-95,10,-95,4,-95},new int[]{-14,181,-42,13,-43,45,-44,46,-45,18,-46,21,-47,24,-48,27});
    states[181] = new State(-68);
    states[182] = new State(-67);
    states[183] = new State(new int[]{38,185,42,-23},new int[]{-18,184});
    states[184] = new State(-22);
    states[185] = new State(new int[]{4,188},new int[]{-17,186});
    states[186] = new State(new int[]{38,185,42,-23},new int[]{-18,187});
    states[187] = new State(-24);
    states[188] = new State(new int[]{39,83,38,-15,42,-15},new int[]{-10,189});
    states[189] = new State(-25);
    states[190] = new State(new int[]{30,192,3,-5,17,-5,19,-5,27,-5},new int[]{-4,191});
    states[191] = new State(-2);
    states[192] = new State(new int[]{8,193});
    states[193] = new State(new int[]{40,194});
    states[194] = new State(new int[]{30,192,3,-5,17,-5,19,-5,27,-5},new int[]{-4,195});
    states[195] = new State(-6);
    states[196] = new State(new int[]{4,197});
    states[197] = new State(new int[]{40,198});
    states[198] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,-4});
    rules[3] = new Rule(-1, new int[]{-1,-5});
    rules[4] = new Rule(-3, new int[]{31,4,40});
    rules[5] = new Rule(-4, new int[]{});
    rules[6] = new Rule(-4, new int[]{30,8,40,-4});
    rules[7] = new Rule(-5, new int[]{-6});
    rules[8] = new Rule(-5, new int[]{-7});
    rules[9] = new Rule(-6, new int[]{-8});
    rules[10] = new Rule(-6, new int[]{-9});
    rules[11] = new Rule(-8, new int[]{17,4,-10,-11,40});
    rules[12] = new Rule(-8, new int[]{17,4,-12,-10,40});
    rules[13] = new Rule(-12, new int[]{});
    rules[14] = new Rule(-12, new int[]{38,4,-12});
    rules[15] = new Rule(-10, new int[]{});
    rules[16] = new Rule(-10, new int[]{39,-13});
    rules[17] = new Rule(-11, new int[]{});
    rules[18] = new Rule(-11, new int[]{18,-14});
    rules[19] = new Rule(-9, new int[]{19,4,18,-13,40});
    rules[20] = new Rule(-7, new int[]{27,4,43,-15,42,-10,18,-16,14});
    rules[21] = new Rule(-15, new int[]{});
    rules[22] = new Rule(-15, new int[]{-17,-18});
    rules[23] = new Rule(-18, new int[]{});
    rules[24] = new Rule(-18, new int[]{38,-17,-18});
    rules[25] = new Rule(-17, new int[]{4,-10});
    rules[26] = new Rule(-13, new int[]{-19});
    rules[27] = new Rule(-13, new int[]{-20});
    rules[28] = new Rule(-13, new int[]{-21});
    rules[29] = new Rule(-13, new int[]{-22});
    rules[30] = new Rule(-13, new int[]{4});
    rules[31] = new Rule(-19, new int[]{33});
    rules[32] = new Rule(-19, new int[]{34});
    rules[33] = new Rule(-19, new int[]{36});
    rules[34] = new Rule(-19, new int[]{35});
    rules[35] = new Rule(-20, new int[]{21,45,-14,44,-13});
    rules[36] = new Rule(-20, new int[]{21,45,44,-13});
    rules[37] = new Rule(-21, new int[]{20,-23,14});
    rules[38] = new Rule(-22, new int[]{28,-19});
    rules[39] = new Rule(-23, new int[]{});
    rules[40] = new Rule(-23, new int[]{-23,-8});
    rules[41] = new Rule(-16, new int[]{});
    rules[42] = new Rule(-16, new int[]{-16,-6});
    rules[43] = new Rule(-16, new int[]{-16,-24});
    rules[44] = new Rule(-24, new int[]{-25,40});
    rules[45] = new Rule(-24, new int[]{-26,40});
    rules[46] = new Rule(-24, new int[]{-27,40});
    rules[47] = new Rule(-24, new int[]{-28,40});
    rules[48] = new Rule(-24, new int[]{-29,40});
    rules[49] = new Rule(-24, new int[]{-30});
    rules[50] = new Rule(-24, new int[]{-31});
    rules[51] = new Rule(-24, new int[]{-32});
    rules[52] = new Rule(-24, new int[]{-33});
    rules[53] = new Rule(-25, new int[]{-34,41,-14});
    rules[54] = new Rule(-26, new int[]{-34,47});
    rules[55] = new Rule(-27, new int[]{-34,48});
    rules[56] = new Rule(-28, new int[]{4,-35});
    rules[57] = new Rule(-29, new int[]{29,-14});
    rules[58] = new Rule(-35, new int[]{43,42});
    rules[59] = new Rule(-35, new int[]{43,-36,42});
    rules[60] = new Rule(-36, new int[]{-14,-37});
    rules[61] = new Rule(-37, new int[]{});
    rules[62] = new Rule(-37, new int[]{38,-14,-37});
    rules[63] = new Rule(-30, new int[]{22,-14,16,-16,14});
    rules[64] = new Rule(-31, new int[]{15,4,-38,16,-16,14});
    rules[65] = new Rule(-38, new int[]{23,-39,-40});
    rules[66] = new Rule(-39, new int[]{});
    rules[67] = new Rule(-39, new int[]{24});
    rules[68] = new Rule(-40, new int[]{-14,63,-14});
    rules[69] = new Rule(-32, new int[]{12,4,13,-34,16,-16,14});
    rules[70] = new Rule(-33, new int[]{11,-14,25,-16,-41,14});
    rules[71] = new Rule(-41, new int[]{});
    rules[72] = new Rule(-41, new int[]{26,-16});
    rules[73] = new Rule(-14, new int[]{-42});
    rules[74] = new Rule(-43, new int[]{-44});
    rules[75] = new Rule(-43, new int[]{-43,60,-44});
    rules[76] = new Rule(-42, new int[]{-43});
    rules[77] = new Rule(-42, new int[]{-42,61,-43});
    rules[78] = new Rule(-44, new int[]{-45});
    rules[79] = new Rule(-44, new int[]{-45,56,-45});
    rules[80] = new Rule(-44, new int[]{-45,54,-45});
    rules[81] = new Rule(-44, new int[]{-45,57,-45});
    rules[82] = new Rule(-44, new int[]{-45,55,-45});
    rules[83] = new Rule(-44, new int[]{-45,46,-45});
    rules[84] = new Rule(-44, new int[]{-45,58,-45});
    rules[85] = new Rule(-44, new int[]{59,-44});
    rules[86] = new Rule(-46, new int[]{-47});
    rules[87] = new Rule(-46, new int[]{-47,51,-46});
    rules[88] = new Rule(-46, new int[]{-47,52,-46});
    rules[89] = new Rule(-46, new int[]{-47,53,-46});
    rules[90] = new Rule(-45, new int[]{-46});
    rules[91] = new Rule(-45, new int[]{-46,50,-45});
    rules[92] = new Rule(-45, new int[]{-46,49,-45});
    rules[93] = new Rule(-47, new int[]{-48,-49});
    rules[94] = new Rule(-47, new int[]{43,-14,42});
    rules[95] = new Rule(-48, new int[]{});
    rules[96] = new Rule(-48, new int[]{49});
    rules[97] = new Rule(-49, new int[]{5});
    rules[98] = new Rule(-49, new int[]{6});
    rules[99] = new Rule(-49, new int[]{7});
    rules[100] = new Rule(-49, new int[]{8});
    rules[101] = new Rule(-49, new int[]{9});
    rules[102] = new Rule(-49, new int[]{10});
    rules[103] = new Rule(-49, new int[]{-34});
    rules[104] = new Rule(-49, new int[]{-28});
    rules[105] = new Rule(-34, new int[]{4,-50});
    rules[106] = new Rule(-50, new int[]{});
    rules[107] = new Rule(-50, new int[]{-50,-51});
    rules[108] = new Rule(-50, new int[]{-50,-52});
    rules[109] = new Rule(-51, new int[]{37,4});
    rules[110] = new Rule(-52, new int[]{45,-14,44});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> Module, Imports
#line 90 "../grammar.y"
                          { CurrentSemanticValue = MakeProgram(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 3: // Program -> Program, Declaration
#line 91 "../grammar.y"
                          { CurrentSemanticValue = AddToProgram(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 4: // Module -> MODULE, IDENTIFIER, SEMICOLON
#line 95 "../grammar.y"
                                  { CurrentSemanticValue = MakeModule(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 5: // Imports -> /* empty */
#line 99 "../grammar.y"
                  { CurrentSemanticValue = MakeImports(); }
#line default
        break;
      case 6: // Imports -> USE, STRING_LITERAL, SEMICOLON, Imports
#line 100 "../grammar.y"
                                           { CurrentSemanticValue = AddToImports(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 7: // Declaration -> SimpleDeclaration
#line 105 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 8: // Declaration -> RoutineDeclaration
#line 106 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 9: // SimpleDeclaration -> VariableDeclaration
#line 110 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 10: // SimpleDeclaration -> TypeDeclaration
#line 111 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 11: // VariableDeclaration -> VAR, IDENTIFIER, TypeTail, VariableInitializationTail, 
               //                        SEMICOLON
#line 116 "../grammar.y"
                                                                     { CurrentSemanticValue = MakeVariableDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 12: // VariableDeclaration -> VAR, IDENTIFIER, IdentifiersTail, TypeTail, SEMICOLON
#line 117 "../grammar.y"
                                                        { CurrentSemanticValue = MakeVariablesDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 13: // IdentifiersTail -> /* empty */
#line 121 "../grammar.y"
                  { CurrentSemanticValue = MakeIdentifiersTail(); }
#line default
        break;
      case 14: // IdentifiersTail -> COMMA, IDENTIFIER, IdentifiersTail
#line 122 "../grammar.y"
                                       { CurrentSemanticValue = AddToIdentifiersTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 15: // TypeTail -> /* empty */
#line 127 "../grammar.y"
                    { CurrentSemanticValue = MakeTypeTail(); }
#line default
        break;
      case 16: // TypeTail -> COLON, Type
#line 128 "../grammar.y"
                    { CurrentSemanticValue = MakeTypeTail(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 17: // VariableInitializationTail -> /* empty */
#line 133 "../grammar.y"
                  { CurrentSemanticValue = MakeVariableInitializationTail(); }
#line default
        break;
      case 18: // VariableInitializationTail -> IS, Expression
#line 134 "../grammar.y"
                    { CurrentSemanticValue = MakeVariableInitializationTail(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 19: // TypeDeclaration -> TYPE, IDENTIFIER, IS, Type, SEMICOLON
#line 139 "../grammar.y"
                                         { CurrentSemanticValue = MakeTypeDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 20: // RoutineDeclaration -> ROUTINE, IDENTIFIER, OPEN_PARENTHESIS, Parameters, 
               //                       CLOSE_PARENTHESIS, TypeTail, IS, Body, END
#line 144 "../grammar.y"
                                                                                            { CurrentSemanticValue = MakeRoutineDeclaration(ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 21: // Parameters -> /* empty */
#line 149 "../grammar.y"
                                            { CurrentSemanticValue = MakeParameters(); }
#line default
        break;
      case 22: // Parameters -> ParameterDeclaration, ParametersTail
#line 150 "../grammar.y"
                                            { CurrentSemanticValue = MakeParameters(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 23: // ParametersTail -> /* empty */
#line 155 "../grammar.y"
                                                { CurrentSemanticValue = MakeParametersTail(); }
#line default
        break;
      case 24: // ParametersTail -> COMMA, ParameterDeclaration, ParametersTail
#line 156 "../grammar.y"
                                                { CurrentSemanticValue = AddToParametersTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 25: // ParameterDeclaration -> IDENTIFIER, TypeTail
#line 161 "../grammar.y"
                          { CurrentSemanticValue = MakeParameterDeclaration(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 26: // Type -> PrimitiveType
#line 166 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 27: // Type -> ArrayType
#line 167 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 28: // Type -> RecordType
#line 168 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 29: // Type -> RefType
#line 169 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 30: // Type -> IDENTIFIER
#line 170 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 31: // PrimitiveType -> INTEGER
#line 175 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 32: // PrimitiveType -> REAL
#line 176 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 33: // PrimitiveType -> BOOLEAN
#line 177 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 34: // PrimitiveType -> CHAR
#line 178 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 35: // ArrayType -> ARRAY, OPEN_BRACKET, Expression, CLOSE_BRACKET, Type
#line 183 "../grammar.y"
                                                       { CurrentSemanticValue = MakeArrayType(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 36: // ArrayType -> ARRAY, OPEN_BRACKET, CLOSE_BRACKET, Type
#line 184 "../grammar.y"
                                            { CurrentSemanticValue = MakeArrayType(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 37: // RecordType -> RECORD, RecordVariableDeclarations, END
#line 198 "../grammar.y"
                                            { CurrentSemanticValue = MakeRecordType(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 38: // RefType -> REF, PrimitiveType
#line 202 "../grammar.y"
                        { CurrentSemanticValue = MakeRef(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 39: // RecordVariableDeclarations -> /* empty */
#line 207 "../grammar.y"
                                                        { CurrentSemanticValue = MakeRecordVariableDeclarations(); }
#line default
        break;
      case 40: // RecordVariableDeclarations -> RecordVariableDeclarations, VariableDeclaration
#line 208 "../grammar.y"
                                                        { CurrentSemanticValue = AddToRecordVariableDeclarations(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 41: // Body -> /* empty */
#line 250 "../grammar.y"
                                { CurrentSemanticValue = MakeBody(); }
#line default
        break;
      case 42: // Body -> Body, SimpleDeclaration
#line 251 "../grammar.y"
                                { CurrentSemanticValue = AddSimpleDeclarationToBody(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 43: // Body -> Body, Statement
#line 252 "../grammar.y"
                                { CurrentSemanticValue = AddStatementToBody(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 44: // Statement -> Assignment, SEMICOLON
#line 257 "../grammar.y"
                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 45: // Statement -> Increment, SEMICOLON
#line 258 "../grammar.y"
                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 46: // Statement -> Decrement, SEMICOLON
#line 259 "../grammar.y"
                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 47: // Statement -> RoutineCall, SEMICOLON
#line 260 "../grammar.y"
                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 48: // Statement -> Return, SEMICOLON
#line 261 "../grammar.y"
                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 49: // Statement -> WhileLoop
#line 262 "../grammar.y"
                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 50: // Statement -> ForLoop
#line 263 "../grammar.y"
                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 51: // Statement -> ForeachLoop
#line 264 "../grammar.y"
                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 52: // Statement -> IfStatement
#line 265 "../grammar.y"
                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 53: // Assignment -> ModifiablePrimary, ASSIGNMENT_OP, Expression
#line 270 "../grammar.y"
                                                    { CurrentSemanticValue = MakeAssignment(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 54: // Increment -> ModifiablePrimary, INCREMENT
#line 274 "../grammar.y"
                                   { CurrentSemanticValue = MakeIncrement(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 55: // Decrement -> ModifiablePrimary, DECREMENT
#line 278 "../grammar.y"
                                   { CurrentSemanticValue = MakeDecrement(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 56: // RoutineCall -> IDENTIFIER, RoutineCallParameters
#line 283 "../grammar.y"
                                        { CurrentSemanticValue = MakeRoutineCall(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 57: // Return -> RETURN, Expression
#line 287 "../grammar.y"
                        { CurrentSemanticValue = MakeReturn(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 58: // RoutineCallParameters -> OPEN_PARENTHESIS, CLOSE_PARENTHESIS
#line 292 "../grammar.y"
                                                        { CurrentSemanticValue = MakeRoutineCallParameters(); }
#line default
        break;
      case 59: // RoutineCallParameters -> OPEN_PARENTHESIS, Expressions, CLOSE_PARENTHESIS
#line 293 "../grammar.y"
                                                        { CurrentSemanticValue = MakeRoutineCallParameters(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 60: // Expressions -> Expression, ExpressionsTail
#line 298 "../grammar.y"
                                    { CurrentSemanticValue = MakeExpressions(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 61: // ExpressionsTail -> /* empty */
#line 303 "../grammar.y"
                                        { CurrentSemanticValue = MakeExpressionTail(); }
#line default
        break;
      case 62: // ExpressionsTail -> COMMA, Expression, ExpressionsTail
#line 304 "../grammar.y"
                                        { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 63: // WhileLoop -> WHILE, Expression, LOOP, Body, END
#line 309 "../grammar.y"
                                        { CurrentSemanticValue = MakeWhileLoop(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 64: // ForLoop -> FOR, IDENTIFIER, Range, LOOP, Body, END
#line 314 "../grammar.y"
                                            { CurrentSemanticValue = MakeForLoop(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 65: // Range -> IN, Reverse, RangeExpression
#line 319 "../grammar.y"
                                    { CurrentSemanticValue = MakeRange(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 66: // Reverse -> /* empty */
#line 324 "../grammar.y"
                    { CurrentSemanticValue = MakeReverse(); }
#line default
        break;
      case 67: // Reverse -> REVERSE
#line 325 "../grammar.y"
                    { CurrentSemanticValue = MakeReverse(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 68: // RangeExpression -> Expression, RANGE, Expression
#line 330 "../grammar.y"
                                    { CurrentSemanticValue = MakeRangeExpression(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 69: // ForeachLoop -> FOREACH, IDENTIFIER, FROM, ModifiablePrimary, LOOP, Body, END
#line 335 "../grammar.y"
                                                                { CurrentSemanticValue = MakeForEachLoop(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 70: // IfStatement -> IF, Expression, THEN, Body, ElseTail, END
#line 340 "../grammar.y"
                                            { CurrentSemanticValue = MakeIfStatement(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 71: // ElseTail -> /* empty */
#line 345 "../grammar.y"
                    { CurrentSemanticValue = MakeElse(); }
#line default
        break;
      case 72: // ElseTail -> ELSE, Body
#line 346 "../grammar.y"
                    { CurrentSemanticValue = MakeElse(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 73: // Expression -> OrExpression
#line 351 "../grammar.y"
                   { CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 74: // AndExpression -> Relation
#line 355 "../grammar.y"
               { CurrentSemanticValue = MakeAndExpression(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 75: // AndExpression -> AndExpression, AND, Relation
#line 356 "../grammar.y"
                                 { CurrentSemanticValue = MakeAndExpression(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 76: // OrExpression -> AndExpression
#line 360 "../grammar.y"
                    { CurrentSemanticValue = MakeOrExpression(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 77: // OrExpression -> OrExpression, OR, AndExpression
#line 361 "../grammar.y"
                                    { CurrentSemanticValue = MakeOrExpression(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 78: // Relation -> Factor
#line 374 "../grammar.y"
             { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 79: // Relation -> Factor, LESS, Factor
#line 375 "../grammar.y"
                                   { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 80: // Relation -> Factor, LESS_EQUAL, Factor
#line 376 "../grammar.y"
                                   { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 81: // Relation -> Factor, GREATER, Factor
#line 377 "../grammar.y"
                                   { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 82: // Relation -> Factor, GREATER_EQUAL, Factor
#line 378 "../grammar.y"
                                   { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 83: // Relation -> Factor, EQUAL, Factor
#line 379 "../grammar.y"
                                   { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 84: // Relation -> Factor, NOT_EQUAL, Factor
#line 380 "../grammar.y"
                                   { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 85: // Relation -> NOT, Relation
#line 381 "../grammar.y"
                   { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 86: // Simple -> Summand
#line 397 "../grammar.y"
              { CurrentSemanticValue = MakeSimple(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 87: // Simple -> Summand, MULTIPLY, Simple
#line 398 "../grammar.y"
                              { CurrentSemanticValue = MakeSimple(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 88: // Simple -> Summand, DIVIDE, Simple
#line 399 "../grammar.y"
                            { CurrentSemanticValue = MakeSimple(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 89: // Simple -> Summand, MOD, Simple
#line 400 "../grammar.y"
                         { CurrentSemanticValue = MakeSimple(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 90: // Factor -> Simple
#line 413 "../grammar.y"
             { CurrentSemanticValue = MakeFactor(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 91: // Factor -> Simple, PLUS, Factor
#line 414 "../grammar.y"
                         { CurrentSemanticValue = MakeFactor(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 92: // Factor -> Simple, MINUS, Factor
#line 415 "../grammar.y"
                          { CurrentSemanticValue = MakeFactor(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 93: // Summand -> Sign, Primary
#line 427 "../grammar.y"
                                                    { CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 94: // Summand -> OPEN_PARENTHESIS, Expression, CLOSE_PARENTHESIS
#line 428 "../grammar.y"
                                                    { CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 95: // Sign -> /* empty */
#line 432 "../grammar.y"
                  { CurrentSemanticValue = MakeSign(); }
#line default
        break;
      case 96: // Sign -> MINUS
#line 433 "../grammar.y"
                  { CurrentSemanticValue = MakeSign(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 97: // Primary -> INTEGER_LITERAL
#line 438 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 98: // Primary -> REAL_LITERAL
#line 439 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 99: // Primary -> CHAR_LITERAL
#line 440 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 100: // Primary -> STRING_LITERAL
#line 441 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 101: // Primary -> TRUE
#line 442 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 102: // Primary -> FALSE
#line 443 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 103: // Primary -> ModifiablePrimary
#line 444 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 104: // Primary -> RoutineCall
#line 445 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 105: // ModifiablePrimary -> IDENTIFIER, ModifiablePrimaryTail
#line 450 "../grammar.y"
                                        { CurrentSemanticValue = MakeModifiablePrimary(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 106: // ModifiablePrimaryTail -> /* empty */
#line 455 "../grammar.y"
                                            { CurrentSemanticValue = MakeModifiablePrimaryTail(); }
#line default
        break;
      case 107: // ModifiablePrimaryTail -> ModifiablePrimaryTail, MemberAccess
#line 456 "../grammar.y"
                                           { CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 108: // ModifiablePrimaryTail -> ModifiablePrimaryTail, ArrayAccess
#line 457 "../grammar.y"
                                         { CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 109: // MemberAccess -> DOT, IDENTIFIER
#line 461 "../grammar.y"
                        { CurrentSemanticValue = MakeMemberAccess(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 110: // ArrayAccess -> OPEN_BRACKET, Expression, CLOSE_BRACKET
#line 469 "../grammar.y"
                                            { CurrentSemanticValue = MakeArrayAccess(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 473 "../grammar.y"
#line default
}
}
