// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-K87RABG
// DateTime: 29.10.2023 21:24:54
// UserName: under
// Input file <../grammar.y - 29.10.2023 21:23:56>

// options: lines

using System.CodeDom.Compiler;
using System.Globalization;
using PelmeniCompilers.Models;
using PelmeniCompilers.ShiftReduceParser;

namespace PelmeniCompilers.Parser
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,INTEGER_LITERAL=5,REAL_LITERAL=6,
    CHAR_LITERAL=7,STRING_LITERAL=8,TRUE=9,FALSE=10,IF=11,FOREACH=12,
    FROM=13,END=14,FOR=15,LOOP=16,VAR=17,IS=18,
    TYPE=19,RECORD=20,ARRAY=21,WHILE=22,IN=23,REVERSE=24,
    THEN=25,ELSE=26,ROUTINE=27,REF=28,RETURN=29,USE=30,
    MODULE=31,INTEGER=32,REAL=33,CHAR=34,BOOLEAN=35,DOT=36,
    COMMA=37,COLON=38,SEMICOLON=39,ASSIGNMENT_OP=40,CLOSE_PARENTHESIS=41,OPEN_PARENTHESIS=42,
    CLOSE_BRACKET=43,OPEN_BRACKET=44,EQUAL=45,INCREMENT=46,DECREMENT=47,MINUS=48,
    PLUS=49,MULTIPLY=50,DIVIDE=51,MOD=52,LESS_EQUAL=53,GREATER_EQUAL=54,
    LESS=55,GREATER=56,NOT_EQUAL=57,NOT=58,AND=59,OR=60,
    XOR=61,RANGE=62};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[115];
  private static State[] states = new State[217];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "Module", "Imports", "Declaration", "SimpleDeclaration", 
      "RoutineDeclaration", "VariableDeclaration", "TypeDeclaration", "TypeTail", 
      "VariableInitializationTail", "IdentifiersTail", "Type", "Expression", 
      "Parameters", "Body", "ParameterDeclaration", "ParametersTail", "PrimitiveType", 
      "ArrayType", "RecordType", "RefType", "CompoundSize", "CompoundSizeTail", 
      "RecordVariableDeclarations", "Statement", "Assignment", "Increment", "Decrement", 
      "RoutineCall", "Return", "WhileLoop", "ForLoop", "ForeachLoop", "IfStatement", 
      "ModifiablePrimary", "RoutineCallParameters", "Expressions", "ExpressionsTail", 
      "Range", "Reverse", "RangeExpression", "ElseTail", "Relation", "ExpressionTail", 
      "Simple", "RelationTail", "Factor", "SimpleTail", "Summand", "FactorTail", 
      "Primary", "ModifiablePrimaryTail", "MemberAccess", "ArrayAccess", };

  static Parser() {
    states[0] = new State(new int[]{31,214},new int[]{-1,1,-3,208});
    states[1] = new State(new int[]{3,2,17,6,19,128,27,134},new int[]{-5,3,-6,4,-8,5,-9,127,-7,133});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-7);
    states[5] = new State(-9);
    states[6] = new State(new int[]{4,7});
    states[7] = new State(new int[]{38,100,37,124,18,-15,39,-13},new int[]{-10,8,-12,97});
    states[8] = new State(new int[]{18,11,39,-17},new int[]{-11,9});
    states[9] = new State(new int[]{39,10});
    states[10] = new State(-11);
    states[11] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-14,12,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[12] = new State(-18);
    states[13] = new State(new int[]{59,15,60,18,61,21,39,-77,37,-77,43,-77,41,-77,16,-77,25,-77,62,-77},new int[]{-45,14});
    states[14] = new State(-76);
    states[15] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-44,16,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[16] = new State(new int[]{59,15,60,18,61,21,39,-77,37,-77,43,-77,41,-77,16,-77,25,-77,62,-77},new int[]{-45,17});
    states[17] = new State(-78);
    states[18] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-44,19,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[19] = new State(new int[]{59,15,60,18,61,21,39,-77,37,-77,43,-77,41,-77,16,-77,25,-77,62,-77},new int[]{-45,20});
    states[20] = new State(-79);
    states[21] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-44,22,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[22] = new State(new int[]{59,15,60,18,61,21,39,-77,37,-77,43,-77,41,-77,16,-77,25,-77,62,-77},new int[]{-45,23});
    states[23] = new State(-80);
    states[24] = new State(new int[]{55,26,53,87,56,89,54,91,45,93,57,95,59,-83,60,-83,61,-83,39,-83,37,-83,43,-83,41,-83,16,-83,25,-83,62,-83},new int[]{-47,25});
    states[25] = new State(-81);
    states[26] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-46,27,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[27] = new State(-84);
    states[28] = new State(new int[]{50,30,51,33,52,36,55,-91,53,-91,56,-91,54,-91,45,-91,57,-91,59,-91,60,-91,61,-91,39,-91,37,-91,43,-91,41,-91,16,-91,25,-91,62,-91},new int[]{-49,29});
    states[29] = new State(-90);
    states[30] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-48,31,-50,39,-52,47,-36,54,-30,72});
    states[31] = new State(new int[]{50,30,51,33,52,36,55,-91,53,-91,56,-91,54,-91,45,-91,57,-91,59,-91,60,-91,61,-91,39,-91,37,-91,43,-91,41,-91,16,-91,25,-91,62,-91},new int[]{-49,32});
    states[32] = new State(-92);
    states[33] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-48,34,-50,39,-52,47,-36,54,-30,72});
    states[34] = new State(new int[]{50,30,51,33,52,36,55,-91,53,-91,56,-91,54,-91,45,-91,57,-91,59,-91,60,-91,61,-91,39,-91,37,-91,43,-91,41,-91,16,-91,25,-91,62,-91},new int[]{-49,35});
    states[35] = new State(-93);
    states[36] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-48,37,-50,39,-52,47,-36,54,-30,72});
    states[37] = new State(new int[]{50,30,51,33,52,36,55,-91,53,-91,56,-91,54,-91,45,-91,57,-91,59,-91,60,-91,61,-91,39,-91,37,-91,43,-91,41,-91,16,-91,25,-91,62,-91},new int[]{-49,38});
    states[38] = new State(-94);
    states[39] = new State(new int[]{49,41,48,44,50,-96,51,-96,52,-96,55,-96,53,-96,56,-96,54,-96,45,-96,57,-96,59,-96,60,-96,61,-96,39,-96,37,-96,43,-96,41,-96,16,-96,25,-96,62,-96},new int[]{-51,40});
    states[40] = new State(-95);
    states[41] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-50,42,-52,47,-36,54,-30,72});
    states[42] = new State(new int[]{49,41,48,44,50,-96,51,-96,52,-96,55,-96,53,-96,56,-96,54,-96,45,-96,57,-96,59,-96,60,-96,61,-96,39,-96,37,-96,43,-96,41,-96,16,-96,25,-96,62,-96},new int[]{-51,43});
    states[43] = new State(-97);
    states[44] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-50,45,-52,47,-36,54,-30,72});
    states[45] = new State(new int[]{49,41,48,44,50,-96,51,-96,52,-96,55,-96,53,-96,56,-96,54,-96,45,-96,57,-96,59,-96,60,-96,61,-96,39,-96,37,-96,43,-96,41,-96,16,-96,25,-96,62,-96},new int[]{-51,46});
    states[46] = new State(-98);
    states[47] = new State(-99);
    states[48] = new State(-101);
    states[49] = new State(-102);
    states[50] = new State(-103);
    states[51] = new State(-104);
    states[52] = new State(-105);
    states[53] = new State(-106);
    states[54] = new State(-107);
    states[55] = new State(new int[]{36,60,44,64,42,78,49,-110,48,-110,50,-110,51,-110,52,-110,55,-110,53,-110,56,-110,54,-110,45,-110,57,-110,59,-110,60,-110,61,-110,39,-110,37,-110,43,-110,41,-110,16,-110,25,-110,62,-110,40,-110,46,-110,47,-110},new int[]{-53,56,-37,57,-54,58,-55,62});
    states[56] = new State(-109);
    states[57] = new State(-59);
    states[58] = new State(new int[]{36,60,44,64,49,-110,48,-110,50,-110,51,-110,52,-110,55,-110,53,-110,56,-110,54,-110,45,-110,57,-110,59,-110,60,-110,61,-110,39,-110,37,-110,43,-110,41,-110,16,-110,25,-110,62,-110,40,-110,46,-110,47,-110},new int[]{-53,59,-54,58,-55,62});
    states[59] = new State(-111);
    states[60] = new State(new int[]{4,61});
    states[61] = new State(-113);
    states[62] = new State(new int[]{36,60,44,64,49,-110,48,-110,50,-110,51,-110,52,-110,55,-110,53,-110,56,-110,54,-110,45,-110,57,-110,59,-110,60,-110,61,-110,39,-110,37,-110,43,-110,41,-110,16,-110,25,-110,62,-110,40,-110,46,-110,47,-110},new int[]{-53,63,-54,58,-55,62});
    states[63] = new State(-112);
    states[64] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-23,65,-14,67,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[65] = new State(new int[]{43,66});
    states[66] = new State(-114);
    states[67] = new State(new int[]{37,69,43,-38},new int[]{-24,68});
    states[68] = new State(-37);
    states[69] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-14,70,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[70] = new State(new int[]{37,69,43,-38},new int[]{-24,71});
    states[71] = new State(-39);
    states[72] = new State(-108);
    states[73] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-14,74,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[74] = new State(new int[]{41,75});
    states[75] = new State(-100);
    states[76] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-44,77,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[77] = new State(-82);
    states[78] = new State(new int[]{41,79,5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-38,80,-14,82,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[79] = new State(-61);
    states[80] = new State(new int[]{41,81});
    states[81] = new State(-62);
    states[82] = new State(new int[]{37,84,41,-64},new int[]{-39,83});
    states[83] = new State(-63);
    states[84] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-14,85,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[85] = new State(new int[]{37,84,41,-64},new int[]{-39,86});
    states[86] = new State(-65);
    states[87] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-46,88,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[88] = new State(-85);
    states[89] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-46,90,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[90] = new State(-86);
    states[91] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-46,92,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[92] = new State(-87);
    states[93] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-46,94,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[94] = new State(-88);
    states[95] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73},new int[]{-46,96,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[96] = new State(-89);
    states[97] = new State(new int[]{38,100,39,-15},new int[]{-10,98});
    states[98] = new State(new int[]{39,99});
    states[99] = new State(-12);
    states[100] = new State(new int[]{32,103,33,104,35,105,34,106,21,108,20,114,28,119,4,121},new int[]{-13,101,-19,102,-20,107,-21,113,-22,118});
    states[101] = new State(-16);
    states[102] = new State(-26);
    states[103] = new State(-31);
    states[104] = new State(-32);
    states[105] = new State(-33);
    states[106] = new State(-34);
    states[107] = new State(-27);
    states[108] = new State(new int[]{44,109});
    states[109] = new State(new int[]{43,122,5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-23,110,-14,67,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[110] = new State(new int[]{43,111});
    states[111] = new State(new int[]{32,103,33,104,35,105,34,106,21,108,20,114,28,119,4,121},new int[]{-13,112,-19,102,-20,107,-21,113,-22,118});
    states[112] = new State(-35);
    states[113] = new State(-28);
    states[114] = new State(-42,new int[]{-25,115});
    states[115] = new State(new int[]{14,116,17,6},new int[]{-8,117});
    states[116] = new State(-40);
    states[117] = new State(-43);
    states[118] = new State(-29);
    states[119] = new State(new int[]{32,103,33,104,35,105,34,106},new int[]{-19,120});
    states[120] = new State(-41);
    states[121] = new State(-30);
    states[122] = new State(new int[]{32,103,33,104,35,105,34,106,21,108,20,114,28,119,4,121},new int[]{-13,123,-19,102,-20,107,-21,113,-22,118});
    states[123] = new State(-36);
    states[124] = new State(new int[]{4,125});
    states[125] = new State(new int[]{37,124,38,-13,39,-13},new int[]{-12,126});
    states[126] = new State(-14);
    states[127] = new State(-10);
    states[128] = new State(new int[]{4,129});
    states[129] = new State(new int[]{18,130});
    states[130] = new State(new int[]{32,103,33,104,35,105,34,106,21,108,20,114,28,119,4,121},new int[]{-13,131,-19,102,-20,107,-21,113,-22,118});
    states[131] = new State(new int[]{39,132});
    states[132] = new State(-19);
    states[133] = new State(-8);
    states[134] = new State(new int[]{4,135});
    states[135] = new State(new int[]{42,136});
    states[136] = new State(new int[]{4,205,41,-21},new int[]{-15,137,-17,200});
    states[137] = new State(new int[]{41,138});
    states[138] = new State(new int[]{38,100,18,-15},new int[]{-10,139});
    states[139] = new State(new int[]{18,140});
    states[140] = new State(-44,new int[]{-16,141});
    states[141] = new State(new int[]{14,142,17,6,19,128,4,55,29,160,22,163,15,169,12,176,11,184},new int[]{-6,143,-26,144,-8,5,-9,127,-27,145,-36,147,-28,152,-29,154,-30,156,-31,158,-32,162,-33,168,-34,175,-35,183});
    states[142] = new State(-20);
    states[143] = new State(-45);
    states[144] = new State(-46);
    states[145] = new State(new int[]{39,146});
    states[146] = new State(-47);
    states[147] = new State(new int[]{40,148,46,150,47,151});
    states[148] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-14,149,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[149] = new State(-56);
    states[150] = new State(-57);
    states[151] = new State(-58);
    states[152] = new State(new int[]{39,153});
    states[153] = new State(-48);
    states[154] = new State(new int[]{39,155});
    states[155] = new State(-49);
    states[156] = new State(new int[]{39,157});
    states[157] = new State(-50);
    states[158] = new State(new int[]{39,159});
    states[159] = new State(-51);
    states[160] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-14,161,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[161] = new State(-60);
    states[162] = new State(-52);
    states[163] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-14,164,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[164] = new State(new int[]{16,165});
    states[165] = new State(-44,new int[]{-16,166});
    states[166] = new State(new int[]{14,167,17,6,19,128,4,55,29,160,22,163,15,169,12,176,11,184},new int[]{-6,143,-26,144,-8,5,-9,127,-27,145,-36,147,-28,152,-29,154,-30,156,-31,158,-32,162,-33,168,-34,175,-35,183});
    states[167] = new State(-66);
    states[168] = new State(-53);
    states[169] = new State(new int[]{4,170});
    states[170] = new State(new int[]{23,193},new int[]{-40,171});
    states[171] = new State(new int[]{16,172});
    states[172] = new State(-44,new int[]{-16,173});
    states[173] = new State(new int[]{14,174,17,6,19,128,4,55,29,160,22,163,15,169,12,176,11,184},new int[]{-6,143,-26,144,-8,5,-9,127,-27,145,-36,147,-28,152,-29,154,-30,156,-31,158,-32,162,-33,168,-34,175,-35,183});
    states[174] = new State(-67);
    states[175] = new State(-54);
    states[176] = new State(new int[]{4,177});
    states[177] = new State(new int[]{13,178});
    states[178] = new State(new int[]{4,192},new int[]{-36,179});
    states[179] = new State(new int[]{16,180});
    states[180] = new State(-44,new int[]{-16,181});
    states[181] = new State(new int[]{14,182,17,6,19,128,4,55,29,160,22,163,15,169,12,176,11,184},new int[]{-6,143,-26,144,-8,5,-9,127,-27,145,-36,147,-28,152,-29,154,-30,156,-31,158,-32,162,-33,168,-34,175,-35,183});
    states[182] = new State(-72);
    states[183] = new State(-55);
    states[184] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-14,185,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[185] = new State(new int[]{25,186});
    states[186] = new State(-44,new int[]{-16,187});
    states[187] = new State(new int[]{26,190,17,6,19,128,4,55,29,160,22,163,15,169,12,176,11,184,14,-74},new int[]{-43,188,-6,143,-26,144,-8,5,-9,127,-27,145,-36,147,-28,152,-29,154,-30,156,-31,158,-32,162,-33,168,-34,175,-35,183});
    states[188] = new State(new int[]{14,189});
    states[189] = new State(-73);
    states[190] = new State(-44,new int[]{-16,191});
    states[191] = new State(new int[]{17,6,19,128,4,55,29,160,22,163,15,169,12,176,11,184,14,-75},new int[]{-6,143,-26,144,-8,5,-9,127,-27,145,-36,147,-28,152,-29,154,-30,156,-31,158,-32,162,-33,168,-34,175,-35,183});
    states[192] = new State(new int[]{36,60,44,64,16,-110},new int[]{-53,56,-54,58,-55,62});
    states[193] = new State(new int[]{24,199,5,-69,6,-69,7,-69,8,-69,9,-69,10,-69,4,-69,42,-69,58,-69},new int[]{-41,194});
    states[194] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-42,195,-14,196,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[195] = new State(-68);
    states[196] = new State(new int[]{62,197});
    states[197] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,42,73,58,76},new int[]{-14,198,-44,13,-46,24,-48,28,-50,39,-52,47,-36,54,-30,72});
    states[198] = new State(-71);
    states[199] = new State(-70);
    states[200] = new State(new int[]{37,202,41,-23},new int[]{-18,201});
    states[201] = new State(-22);
    states[202] = new State(new int[]{4,205},new int[]{-17,203});
    states[203] = new State(new int[]{37,202,41,-23},new int[]{-18,204});
    states[204] = new State(-24);
    states[205] = new State(new int[]{38,206});
    states[206] = new State(new int[]{32,103,33,104,35,105,34,106,21,108,20,114,28,119,4,121},new int[]{-13,207,-19,102,-20,107,-21,113,-22,118});
    states[207] = new State(-25);
    states[208] = new State(new int[]{30,210,3,-5,17,-5,19,-5,27,-5},new int[]{-4,209});
    states[209] = new State(-2);
    states[210] = new State(new int[]{8,211});
    states[211] = new State(new int[]{39,212});
    states[212] = new State(new int[]{30,210,3,-5,17,-5,19,-5,27,-5},new int[]{-4,213});
    states[213] = new State(-6);
    states[214] = new State(new int[]{4,215});
    states[215] = new State(new int[]{39,216});
    states[216] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,-4});
    rules[3] = new Rule(-1, new int[]{-1,-5});
    rules[4] = new Rule(-3, new int[]{31,4,39});
    rules[5] = new Rule(-4, new int[]{});
    rules[6] = new Rule(-4, new int[]{30,8,39,-4});
    rules[7] = new Rule(-5, new int[]{-6});
    rules[8] = new Rule(-5, new int[]{-7});
    rules[9] = new Rule(-6, new int[]{-8});
    rules[10] = new Rule(-6, new int[]{-9});
    rules[11] = new Rule(-8, new int[]{17,4,-10,-11,39});
    rules[12] = new Rule(-8, new int[]{17,4,-12,-10,39});
    rules[13] = new Rule(-12, new int[]{});
    rules[14] = new Rule(-12, new int[]{37,4,-12});
    rules[15] = new Rule(-10, new int[]{});
    rules[16] = new Rule(-10, new int[]{38,-13});
    rules[17] = new Rule(-11, new int[]{});
    rules[18] = new Rule(-11, new int[]{18,-14});
    rules[19] = new Rule(-9, new int[]{19,4,18,-13,39});
    rules[20] = new Rule(-7, new int[]{27,4,42,-15,41,-10,18,-16,14});
    rules[21] = new Rule(-15, new int[]{});
    rules[22] = new Rule(-15, new int[]{-17,-18});
    rules[23] = new Rule(-18, new int[]{});
    rules[24] = new Rule(-18, new int[]{37,-17,-18});
    rules[25] = new Rule(-17, new int[]{4,38,-13});
    rules[26] = new Rule(-13, new int[]{-19});
    rules[27] = new Rule(-13, new int[]{-20});
    rules[28] = new Rule(-13, new int[]{-21});
    rules[29] = new Rule(-13, new int[]{-22});
    rules[30] = new Rule(-13, new int[]{4});
    rules[31] = new Rule(-19, new int[]{32});
    rules[32] = new Rule(-19, new int[]{33});
    rules[33] = new Rule(-19, new int[]{35});
    rules[34] = new Rule(-19, new int[]{34});
    rules[35] = new Rule(-20, new int[]{21,44,-23,43,-13});
    rules[36] = new Rule(-20, new int[]{21,44,43,-13});
    rules[37] = new Rule(-23, new int[]{-14,-24});
    rules[38] = new Rule(-24, new int[]{});
    rules[39] = new Rule(-24, new int[]{37,-14,-24});
    rules[40] = new Rule(-21, new int[]{20,-25,14});
    rules[41] = new Rule(-22, new int[]{28,-19});
    rules[42] = new Rule(-25, new int[]{});
    rules[43] = new Rule(-25, new int[]{-25,-8});
    rules[44] = new Rule(-16, new int[]{});
    rules[45] = new Rule(-16, new int[]{-16,-6});
    rules[46] = new Rule(-16, new int[]{-16,-26});
    rules[47] = new Rule(-26, new int[]{-27,39});
    rules[48] = new Rule(-26, new int[]{-28,39});
    rules[49] = new Rule(-26, new int[]{-29,39});
    rules[50] = new Rule(-26, new int[]{-30,39});
    rules[51] = new Rule(-26, new int[]{-31,39});
    rules[52] = new Rule(-26, new int[]{-32});
    rules[53] = new Rule(-26, new int[]{-33});
    rules[54] = new Rule(-26, new int[]{-34});
    rules[55] = new Rule(-26, new int[]{-35});
    rules[56] = new Rule(-27, new int[]{-36,40,-14});
    rules[57] = new Rule(-28, new int[]{-36,46});
    rules[58] = new Rule(-29, new int[]{-36,47});
    rules[59] = new Rule(-30, new int[]{4,-37});
    rules[60] = new Rule(-31, new int[]{29,-14});
    rules[61] = new Rule(-37, new int[]{42,41});
    rules[62] = new Rule(-37, new int[]{42,-38,41});
    rules[63] = new Rule(-38, new int[]{-14,-39});
    rules[64] = new Rule(-39, new int[]{});
    rules[65] = new Rule(-39, new int[]{37,-14,-39});
    rules[66] = new Rule(-32, new int[]{22,-14,16,-16,14});
    rules[67] = new Rule(-33, new int[]{15,4,-40,16,-16,14});
    rules[68] = new Rule(-40, new int[]{23,-41,-42});
    rules[69] = new Rule(-41, new int[]{});
    rules[70] = new Rule(-41, new int[]{24});
    rules[71] = new Rule(-42, new int[]{-14,62,-14});
    rules[72] = new Rule(-34, new int[]{12,4,13,-36,16,-16,14});
    rules[73] = new Rule(-35, new int[]{11,-14,25,-16,-43,14});
    rules[74] = new Rule(-43, new int[]{});
    rules[75] = new Rule(-43, new int[]{26,-16});
    rules[76] = new Rule(-14, new int[]{-44,-45});
    rules[77] = new Rule(-45, new int[]{});
    rules[78] = new Rule(-45, new int[]{59,-44,-45});
    rules[79] = new Rule(-45, new int[]{60,-44,-45});
    rules[80] = new Rule(-45, new int[]{61,-44,-45});
    rules[81] = new Rule(-44, new int[]{-46,-47});
    rules[82] = new Rule(-44, new int[]{58,-44});
    rules[83] = new Rule(-47, new int[]{});
    rules[84] = new Rule(-47, new int[]{55,-46});
    rules[85] = new Rule(-47, new int[]{53,-46});
    rules[86] = new Rule(-47, new int[]{56,-46});
    rules[87] = new Rule(-47, new int[]{54,-46});
    rules[88] = new Rule(-47, new int[]{45,-46});
    rules[89] = new Rule(-47, new int[]{57,-46});
    rules[90] = new Rule(-46, new int[]{-48,-49});
    rules[91] = new Rule(-49, new int[]{});
    rules[92] = new Rule(-49, new int[]{50,-48,-49});
    rules[93] = new Rule(-49, new int[]{51,-48,-49});
    rules[94] = new Rule(-49, new int[]{52,-48,-49});
    rules[95] = new Rule(-48, new int[]{-50,-51});
    rules[96] = new Rule(-51, new int[]{});
    rules[97] = new Rule(-51, new int[]{49,-50,-51});
    rules[98] = new Rule(-51, new int[]{48,-50,-51});
    rules[99] = new Rule(-50, new int[]{-52});
    rules[100] = new Rule(-50, new int[]{42,-14,41});
    rules[101] = new Rule(-52, new int[]{5});
    rules[102] = new Rule(-52, new int[]{6});
    rules[103] = new Rule(-52, new int[]{7});
    rules[104] = new Rule(-52, new int[]{8});
    rules[105] = new Rule(-52, new int[]{9});
    rules[106] = new Rule(-52, new int[]{10});
    rules[107] = new Rule(-52, new int[]{-36});
    rules[108] = new Rule(-52, new int[]{-30});
    rules[109] = new Rule(-36, new int[]{4,-53});
    rules[110] = new Rule(-53, new int[]{});
    rules[111] = new Rule(-53, new int[]{-54,-53});
    rules[112] = new Rule(-53, new int[]{-55,-53});
    rules[113] = new Rule(-54, new int[]{36,4});
    rules[114] = new Rule(-55, new int[]{44,-23,43});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> Module, Imports
#line 89 "../grammar.y"
                          { CurrentSemanticValue = MakeProgram(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 3: // Program -> Program, Declaration
#line 90 "../grammar.y"
                          { CurrentSemanticValue = AddToProgram(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 4: // Module -> MODULE, IDENTIFIER, SEMICOLON
#line 94 "../grammar.y"
                                  { CurrentSemanticValue = MakeModule(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 5: // Imports -> /* empty */
#line 98 "../grammar.y"
                  { CurrentSemanticValue = MakeImports(); }
#line default
        break;
      case 6: // Imports -> USE, STRING_LITERAL, SEMICOLON, Imports
#line 99 "../grammar.y"
                                           { CurrentSemanticValue = AddToImports(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 7: // Declaration -> SimpleDeclaration
#line 104 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 8: // Declaration -> RoutineDeclaration
#line 105 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 9: // SimpleDeclaration -> VariableDeclaration
#line 109 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 10: // SimpleDeclaration -> TypeDeclaration
#line 110 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 11: // VariableDeclaration -> VAR, IDENTIFIER, TypeTail, VariableInitializationTail, 
               //                        SEMICOLON
#line 115 "../grammar.y"
                                                                     { CurrentSemanticValue = MakeVariableDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 12: // VariableDeclaration -> VAR, IDENTIFIER, IdentifiersTail, TypeTail, SEMICOLON
#line 116 "../grammar.y"
                                                        { CurrentSemanticValue = MakeVariablesDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 13: // IdentifiersTail -> /* empty */
#line 120 "../grammar.y"
                  { CurrentSemanticValue = MakeIdentifiersTail(); }
#line default
        break;
      case 14: // IdentifiersTail -> COMMA, IDENTIFIER, IdentifiersTail
#line 121 "../grammar.y"
                                       { CurrentSemanticValue = AddToIdentifiersTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 15: // TypeTail -> /* empty */
#line 126 "../grammar.y"
                    { CurrentSemanticValue = MakeTypeTail(); }
#line default
        break;
      case 16: // TypeTail -> COLON, Type
#line 127 "../grammar.y"
                    { CurrentSemanticValue = MakeTypeTail(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 17: // VariableInitializationTail -> /* empty */
#line 132 "../grammar.y"
                  { CurrentSemanticValue = MakeVariableInitializationTail(); }
#line default
        break;
      case 18: // VariableInitializationTail -> IS, Expression
#line 133 "../grammar.y"
                    { CurrentSemanticValue = MakeVariableInitializationTail(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 19: // TypeDeclaration -> TYPE, IDENTIFIER, IS, Type, SEMICOLON
#line 138 "../grammar.y"
                                         { CurrentSemanticValue = MakeTypeDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 20: // RoutineDeclaration -> ROUTINE, IDENTIFIER, OPEN_PARENTHESIS, Parameters, 
               //                       CLOSE_PARENTHESIS, TypeTail, IS, Body, END
#line 143 "../grammar.y"
                                                                                            { CurrentSemanticValue = MakeRoutineDeclaration(ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 21: // Parameters -> /* empty */
#line 148 "../grammar.y"
                                            { CurrentSemanticValue = MakeParameters(); }
#line default
        break;
      case 22: // Parameters -> ParameterDeclaration, ParametersTail
#line 149 "../grammar.y"
                                            { CurrentSemanticValue = MakeParameters(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 23: // ParametersTail -> /* empty */
#line 154 "../grammar.y"
                                                { CurrentSemanticValue = MakeParametersTail(); }
#line default
        break;
      case 24: // ParametersTail -> COMMA, ParameterDeclaration, ParametersTail
#line 155 "../grammar.y"
                                                { CurrentSemanticValue = AddToParametersTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 25: // ParameterDeclaration -> IDENTIFIER, COLON, Type
#line 160 "../grammar.y"
                            { CurrentSemanticValue = MakeParameterDeclaration(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 26: // Type -> PrimitiveType
#line 165 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 27: // Type -> ArrayType
#line 166 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 28: // Type -> RecordType
#line 167 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 29: // Type -> RefType
#line 168 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 30: // Type -> IDENTIFIER
#line 169 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 31: // PrimitiveType -> INTEGER
#line 174 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 32: // PrimitiveType -> REAL
#line 175 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 33: // PrimitiveType -> BOOLEAN
#line 176 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 34: // PrimitiveType -> CHAR
#line 177 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 35: // ArrayType -> ARRAY, OPEN_BRACKET, CompoundSize, CLOSE_BRACKET, Type
#line 182 "../grammar.y"
                                                         { CurrentSemanticValue = MakeArrayType(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 36: // ArrayType -> ARRAY, OPEN_BRACKET, CLOSE_BRACKET, Type
#line 183 "../grammar.y"
                                            { CurrentSemanticValue = MakeArrayType(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 37: // CompoundSize -> Expression, CompoundSizeTail
#line 187 "../grammar.y"
                                  { CurrentSemanticValue = MakeCompoundSize(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 38: // CompoundSizeTail -> /* empty */
#line 191 "../grammar.y"
                  { CurrentSemanticValue = MakeCompoundSizeTail(); }
#line default
        break;
      case 39: // CompoundSizeTail -> COMMA, Expression, CompoundSizeTail
#line 192 "../grammar.y"
                                        { CurrentSemanticValue = AddToCompoundSizeTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 40: // RecordType -> RECORD, RecordVariableDeclarations, END
#line 197 "../grammar.y"
                                            { CurrentSemanticValue = MakeRecordType(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 41: // RefType -> REF, PrimitiveType
#line 201 "../grammar.y"
                        { CurrentSemanticValue = MakeRef(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 42: // RecordVariableDeclarations -> /* empty */
#line 206 "../grammar.y"
                                                        { CurrentSemanticValue = MakeRecordVariableDeclarations(); }
#line default
        break;
      case 43: // RecordVariableDeclarations -> RecordVariableDeclarations, VariableDeclaration
#line 207 "../grammar.y"
                                                        { CurrentSemanticValue = AddToRecordVariableDeclarations(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 44: // Body -> /* empty */
#line 212 "../grammar.y"
                                { CurrentSemanticValue = MakeBody(); }
#line default
        break;
      case 45: // Body -> Body, SimpleDeclaration
#line 213 "../grammar.y"
                                { CurrentSemanticValue = AddSimpleDeclarationToBody(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 46: // Body -> Body, Statement
#line 214 "../grammar.y"
                                { CurrentSemanticValue = AddStatementToBody(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 47: // Statement -> Assignment, SEMICOLON
#line 219 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 48: // Statement -> Increment, SEMICOLON
#line 220 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 49: // Statement -> Decrement, SEMICOLON
#line 221 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 50: // Statement -> RoutineCall, SEMICOLON
#line 222 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 51: // Statement -> Return, SEMICOLON
#line 223 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 52: // Statement -> WhileLoop
#line 224 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 53: // Statement -> ForLoop
#line 225 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 54: // Statement -> ForeachLoop
#line 226 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 55: // Statement -> IfStatement
#line 227 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 56: // Assignment -> ModifiablePrimary, ASSIGNMENT_OP, Expression
#line 232 "../grammar.y"
                                                    { CurrentSemanticValue = MakeAssignment(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 57: // Increment -> ModifiablePrimary, INCREMENT
#line 236 "../grammar.y"
                                   { CurrentSemanticValue = MakeIncrement(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 58: // Decrement -> ModifiablePrimary, DECREMENT
#line 240 "../grammar.y"
                                   { CurrentSemanticValue = MakeDecrement(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 59: // RoutineCall -> IDENTIFIER, RoutineCallParameters
#line 245 "../grammar.y"
                                        { CurrentSemanticValue = MakeRoutineCall(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 60: // Return -> RETURN, Expression
#line 249 "../grammar.y"
                        { CurrentSemanticValue = MakeReturn(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 61: // RoutineCallParameters -> OPEN_PARENTHESIS, CLOSE_PARENTHESIS
#line 254 "../grammar.y"
                                                        { CurrentSemanticValue = MakeRoutineCallParameters(); }
#line default
        break;
      case 62: // RoutineCallParameters -> OPEN_PARENTHESIS, Expressions, CLOSE_PARENTHESIS
#line 255 "../grammar.y"
                                                        { CurrentSemanticValue = MakeRoutineCallParameters(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 63: // Expressions -> Expression, ExpressionsTail
#line 260 "../grammar.y"
                                    { CurrentSemanticValue = MakeExpressions(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 64: // ExpressionsTail -> /* empty */
#line 265 "../grammar.y"
                                        { CurrentSemanticValue = MakeExpressionTail(); }
#line default
        break;
      case 65: // ExpressionsTail -> COMMA, Expression, ExpressionsTail
#line 266 "../grammar.y"
                                        { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 66: // WhileLoop -> WHILE, Expression, LOOP, Body, END
#line 271 "../grammar.y"
                                        { CurrentSemanticValue = MakeWhileLoop(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 67: // ForLoop -> FOR, IDENTIFIER, Range, LOOP, Body, END
#line 276 "../grammar.y"
                                            { CurrentSemanticValue = MakeForLoop(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 68: // Range -> IN, Reverse, RangeExpression
#line 281 "../grammar.y"
                                    { CurrentSemanticValue = MakeRange(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 69: // Reverse -> /* empty */
#line 286 "../grammar.y"
                    { CurrentSemanticValue = MakeReverse(); }
#line default
        break;
      case 70: // Reverse -> REVERSE
#line 287 "../grammar.y"
                    { CurrentSemanticValue = MakeReverse(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 71: // RangeExpression -> Expression, RANGE, Expression
#line 292 "../grammar.y"
                                    { CurrentSemanticValue = MakeRangeExpression(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 72: // ForeachLoop -> FOREACH, IDENTIFIER, FROM, ModifiablePrimary, LOOP, Body, END
#line 297 "../grammar.y"
                                                                { CurrentSemanticValue = MakeForEachLoop(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 73: // IfStatement -> IF, Expression, THEN, Body, ElseTail, END
#line 302 "../grammar.y"
                                            { CurrentSemanticValue = MakeIfStatement(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 74: // ElseTail -> /* empty */
#line 307 "../grammar.y"
                    { CurrentSemanticValue = MakeElse(); }
#line default
        break;
      case 75: // ElseTail -> ELSE, Body
#line 308 "../grammar.y"
                    { CurrentSemanticValue = MakeElse(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 76: // Expression -> Relation, ExpressionTail
#line 313 "../grammar.y"
                                { CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 77: // ExpressionTail -> /* empty */
#line 318 "../grammar.y"
                  { CurrentSemanticValue = MakeExpressionTail(); }
#line default
        break;
      case 78: // ExpressionTail -> AND, Relation, ExpressionTail
#line 319 "../grammar.y"
                                    { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 79: // ExpressionTail -> OR, Relation, ExpressionTail
#line 320 "../grammar.y"
                                    { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 80: // ExpressionTail -> XOR, Relation, ExpressionTail
#line 321 "../grammar.y"
                                    { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 81: // Relation -> Simple, RelationTail
#line 326 "../grammar.y"
                          { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 82: // Relation -> NOT, Relation
#line 327 "../grammar.y"
                   { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 83: // RelationTail -> /* empty */
#line 332 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail();       }
#line default
        break;
      case 84: // RelationTail -> LESS, Simple
#line 333 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 85: // RelationTail -> LESS_EQUAL, Simple
#line 334 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 86: // RelationTail -> GREATER, Simple
#line 335 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 87: // RelationTail -> GREATER_EQUAL, Simple
#line 336 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 88: // RelationTail -> EQUAL, Simple
#line 337 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 89: // RelationTail -> NOT_EQUAL, Simple
#line 338 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 90: // Simple -> Factor, SimpleTail
#line 343 "../grammar.y"
                        { CurrentSemanticValue = MakeSimple(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 91: // SimpleTail -> /* empty */
#line 348 "../grammar.y"
                                    { CurrentSemanticValue = MakeSimpleTail();            }
#line default
        break;
      case 92: // SimpleTail -> MULTIPLY, Factor, SimpleTail
#line 349 "../grammar.y"
                                    { CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 93: // SimpleTail -> DIVIDE, Factor, SimpleTail
#line 350 "../grammar.y"
                                    { CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 94: // SimpleTail -> MOD, Factor, SimpleTail
#line 351 "../grammar.y"
                                    { CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 95: // Factor -> Summand, FactorTail
#line 356 "../grammar.y"
                            { CurrentSemanticValue = MakeFactor(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 96: // FactorTail -> /* empty */
#line 361 "../grammar.y"
                                { CurrentSemanticValue = MakeFactorTail(); }
#line default
        break;
      case 97: // FactorTail -> PLUS, Summand, FactorTail
#line 362 "../grammar.y"
                                { CurrentSemanticValue = AddToFactorTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 98: // FactorTail -> MINUS, Summand, FactorTail
#line 363 "../grammar.y"
                                { CurrentSemanticValue = AddToFactorTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 99: // Summand -> Primary
#line 368 "../grammar.y"
                                                    { CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 100: // Summand -> OPEN_PARENTHESIS, Expression, CLOSE_PARENTHESIS
#line 369 "../grammar.y"
                                                    { CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 101: // Primary -> INTEGER_LITERAL
#line 374 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 102: // Primary -> REAL_LITERAL
#line 375 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 103: // Primary -> CHAR_LITERAL
#line 376 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 104: // Primary -> STRING_LITERAL
#line 377 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 105: // Primary -> TRUE
#line 378 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 106: // Primary -> FALSE
#line 379 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 107: // Primary -> ModifiablePrimary
#line 380 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 108: // Primary -> RoutineCall
#line 381 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 109: // ModifiablePrimary -> IDENTIFIER, ModifiablePrimaryTail
#line 386 "../grammar.y"
                                        { CurrentSemanticValue = MakeModifiablePrimary(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 110: // ModifiablePrimaryTail -> /* empty */
#line 391 "../grammar.y"
                                            { CurrentSemanticValue = MakeModifiablePrimaryTail(); }
#line default
        break;
      case 111: // ModifiablePrimaryTail -> MemberAccess, ModifiablePrimaryTail
#line 392 "../grammar.y"
                                            { CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 112: // ModifiablePrimaryTail -> ArrayAccess, ModifiablePrimaryTail
#line 393 "../grammar.y"
                                            { CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 113: // MemberAccess -> DOT, IDENTIFIER
#line 397 "../grammar.y"
                        { CurrentSemanticValue = MakeMemberAccess(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 114: // ArrayAccess -> OPEN_BRACKET, CompoundSize, CLOSE_BRACKET
#line 401 "../grammar.y"
                                              { CurrentSemanticValue = MakeArrayAccess(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 405 "../grammar.y"
#line default
}
}
