// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-K87RABG
// DateTime: 16.10.2023 19:14:09
// UserName: under
// Input file <../grammar.y - 16.10.2023 19:13:04>

// options: lines


using System.CodeDom.Compiler;
using System.Globalization;
using PelmeniCompilers.Models;
using PelmeniCompilers.ShiftReduceParser;

namespace PelmeniCompilers.Parser
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,INTEGER_LITERAL=5,REAL_LITERAL=6,
    CHAR_LITERAL=7,STRING_LITERAL=8,TRUE=9,FALSE=10,IF=11,FOREACH=12,
    FROM=13,END=14,FOR=15,LOOP=16,VAR=17,IS=18,
    TYPE=19,RECORD=20,ARRAY=21,WHILE=22,IN=23,REVERSE=24,
    THEN=25,ELSE=26,ROUTINE=27,REF=28,INTEGER=29,REAL=30,
    CHAR=31,BOOLEAN=32,DOT=33,COMMA=34,COLON=35,SEMICOLON=36,
    ASSIGNMENT_OP=37,CLOSE_PARENTHESIS=38,OPEN_PARENTHESIS=39,CLOSE_BRACKET=40,OPEN_BRACKET=41,EQUAL=42,
    INCREMENT=43,DECREMENT=44,MINUS=45,PLUS=46,MULTIPLY=47,DIVIDE=48,
    MOD=49,LESS_EQUAL=50,GREATER_EQUAL=51,LESS=52,GREATER=53,NOT_EQUAL=54,
    AND=55,OR=56,XOR=57,RANGE=58};

[GeneratedCode( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[100];
  private static State[] states = new State[188];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "Declaration", "SimpleDeclaration", "RoutineDeclaration", 
      "VariableDeclaration", "TypeDeclaration", "TypeTail", "VariableInitializationTail", 
      "Type", "Expression", "Parameters", "Body", "ParameterDeclaration", "ParametersTail", 
      "PrimitiveType", "ArrayType", "RecordType", "RefType", "RecordVariableDeclarations", 
      "Statement", "Assignment", "Increment", "Decrement", "RoutineCall", "WhileLoop", 
      "ForLoop", "ForeachLoop", "IfStatement", "ModifiablePrimary", "RoutineCallParameters", 
      "Expressions", "ExpressionsTail", "Range", "Reverse", "RangeExpression", 
      "ElseTail", "Relation", "ExpressionTail", "Simple", "RelationTail", "Factor", 
      "SimpleTail", "Summand", "FactorTail", "Primary", "ModifiablePrimaryTail", 
      "MemberAccess", "ArrayAccess", };

  static Parser() {
    states[0] = new State(new int[]{17,6,19,102,27,108},new int[]{-1,1,-3,187,-4,4,-6,5,-7,101,-5,107});
    states[1] = new State(new int[]{3,2,17,6,19,102,27,108},new int[]{-3,3,-4,4,-6,5,-7,101,-5,107});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-6);
    states[6] = new State(new int[]{4,7});
    states[7] = new State(new int[]{35,79,18,-9},new int[]{-8,8});
    states[8] = new State(new int[]{18,11},new int[]{-9,9});
    states[9] = new State(new int[]{36,10});
    states[10] = new State(-8);
    states[11] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-11,12,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[12] = new State(-11);
    states[13] = new State(new int[]{55,15,56,18,57,21,36,-64,40,-64,38,-64,34,-64,16,-64,25,-64,58,-64},new int[]{-39,14});
    states[14] = new State(-63);
    states[15] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-38,16,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[16] = new State(new int[]{55,15,56,18,57,21,36,-64,40,-64,38,-64,34,-64,16,-64,25,-64,58,-64},new int[]{-39,17});
    states[17] = new State(-65);
    states[18] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-38,19,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[19] = new State(new int[]{55,15,56,18,57,21,36,-64,40,-64,38,-64,34,-64,16,-64,25,-64,58,-64},new int[]{-39,20});
    states[20] = new State(-66);
    states[21] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-38,22,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[22] = new State(new int[]{55,15,56,18,57,21,36,-64,40,-64,38,-64,34,-64,16,-64,25,-64,58,-64},new int[]{-39,23});
    states[23] = new State(-67);
    states[24] = new State(new int[]{52,26,50,69,53,71,51,73,42,75,54,77,55,-69,56,-69,57,-69,36,-69,40,-69,38,-69,34,-69,16,-69,25,-69,58,-69},new int[]{-41,25});
    states[25] = new State(-68);
    states[26] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-40,27,-42,28,-44,39,-46,47,-30,54});
    states[27] = new State(-70);
    states[28] = new State(new int[]{47,30,48,33,49,36,52,-77,50,-77,53,-77,51,-77,42,-77,54,-77,55,-77,56,-77,57,-77,36,-77,40,-77,38,-77,34,-77,16,-77,25,-77,58,-77},new int[]{-43,29});
    states[29] = new State(-76);
    states[30] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-42,31,-44,39,-46,47,-30,54});
    states[31] = new State(new int[]{47,30,48,33,49,36,52,-77,50,-77,53,-77,51,-77,42,-77,54,-77,55,-77,56,-77,57,-77,36,-77,40,-77,38,-77,34,-77,16,-77,25,-77,58,-77},new int[]{-43,32});
    states[32] = new State(-78);
    states[33] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-42,34,-44,39,-46,47,-30,54});
    states[34] = new State(new int[]{47,30,48,33,49,36,52,-77,50,-77,53,-77,51,-77,42,-77,54,-77,55,-77,56,-77,57,-77,36,-77,40,-77,38,-77,34,-77,16,-77,25,-77,58,-77},new int[]{-43,35});
    states[35] = new State(-79);
    states[36] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-42,37,-44,39,-46,47,-30,54});
    states[37] = new State(new int[]{47,30,48,33,49,36,52,-77,50,-77,53,-77,51,-77,42,-77,54,-77,55,-77,56,-77,57,-77,36,-77,40,-77,38,-77,34,-77,16,-77,25,-77,58,-77},new int[]{-43,38});
    states[38] = new State(-80);
    states[39] = new State(new int[]{46,41,45,44,47,-82,48,-82,49,-82,52,-82,50,-82,53,-82,51,-82,42,-82,54,-82,55,-82,56,-82,57,-82,36,-82,40,-82,38,-82,34,-82,16,-82,25,-82,58,-82},new int[]{-45,40});
    states[40] = new State(-81);
    states[41] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-44,42,-46,47,-30,54});
    states[42] = new State(new int[]{46,41,45,44,47,-82,48,-82,49,-82,52,-82,50,-82,53,-82,51,-82,42,-82,54,-82,55,-82,56,-82,57,-82,36,-82,40,-82,38,-82,34,-82,16,-82,25,-82,58,-82},new int[]{-45,43});
    states[43] = new State(-83);
    states[44] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-44,45,-46,47,-30,54});
    states[45] = new State(new int[]{46,41,45,44,47,-82,48,-82,49,-82,52,-82,50,-82,53,-82,51,-82,42,-82,54,-82,55,-82,56,-82,57,-82,36,-82,40,-82,38,-82,34,-82,16,-82,25,-82,58,-82},new int[]{-45,46});
    states[46] = new State(-84);
    states[47] = new State(-85);
    states[48] = new State(-87);
    states[49] = new State(-88);
    states[50] = new State(-89);
    states[51] = new State(-90);
    states[52] = new State(-91);
    states[53] = new State(-92);
    states[54] = new State(-93);
    states[55] = new State(new int[]{33,59,41,63,46,-95,45,-95,47,-95,48,-95,49,-95,52,-95,50,-95,53,-95,51,-95,42,-95,54,-95,55,-95,56,-95,57,-95,36,-95,40,-95,38,-95,34,-95,16,-95,25,-95,58,-95},new int[]{-47,56,-48,57,-49,61});
    states[56] = new State(-94);
    states[57] = new State(new int[]{33,59,41,63,46,-95,45,-95,47,-95,48,-95,49,-95,52,-95,50,-95,53,-95,51,-95,42,-95,54,-95,55,-95,56,-95,57,-95,36,-95,40,-95,38,-95,34,-95,16,-95,25,-95,58,-95,37,-95},new int[]{-47,58,-48,57,-49,61});
    states[58] = new State(-96);
    states[59] = new State(new int[]{4,60});
    states[60] = new State(-98);
    states[61] = new State(new int[]{33,59,41,63,46,-95,45,-95,47,-95,48,-95,49,-95,52,-95,50,-95,53,-95,51,-95,42,-95,54,-95,55,-95,56,-95,57,-95,36,-95,40,-95,38,-95,34,-95,16,-95,25,-95,58,-95,37,-95},new int[]{-47,62,-48,57,-49,61});
    states[62] = new State(-97);
    states[63] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-11,64,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[64] = new State(new int[]{40,65});
    states[65] = new State(-99);
    states[66] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-11,67,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[67] = new State(new int[]{38,68});
    states[68] = new State(-86);
    states[69] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-40,70,-42,28,-44,39,-46,47,-30,54});
    states[70] = new State(-71);
    states[71] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-40,72,-42,28,-44,39,-46,47,-30,54});
    states[72] = new State(-72);
    states[73] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-40,74,-42,28,-44,39,-46,47,-30,54});
    states[74] = new State(-73);
    states[75] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-40,76,-42,28,-44,39,-46,47,-30,54});
    states[76] = new State(-74);
    states[77] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-40,78,-42,28,-44,39,-46,47,-30,54});
    states[78] = new State(-75);
    states[79] = new State(new int[]{29,82,30,83,32,84,31,85,21,87,20,93,28,98,4,100},new int[]{-10,80,-16,81,-17,86,-18,92,-19,97});
    states[80] = new State(-10);
    states[81] = new State(-19);
    states[82] = new State(-24);
    states[83] = new State(-25);
    states[84] = new State(-26);
    states[85] = new State(-27);
    states[86] = new State(-20);
    states[87] = new State(new int[]{41,88});
    states[88] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-11,89,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[89] = new State(new int[]{40,90});
    states[90] = new State(new int[]{29,82,30,83,32,84,31,85,21,87,20,93,28,98,4,100},new int[]{-10,91,-16,81,-17,86,-18,92,-19,97});
    states[91] = new State(-28);
    states[92] = new State(-21);
    states[93] = new State(-31,new int[]{-20,94});
    states[94] = new State(new int[]{14,95,17,6},new int[]{-6,96});
    states[95] = new State(-29);
    states[96] = new State(-32);
    states[97] = new State(-22);
    states[98] = new State(new int[]{29,82,30,83,32,84,31,85},new int[]{-16,99});
    states[99] = new State(-30);
    states[100] = new State(-23);
    states[101] = new State(-7);
    states[102] = new State(new int[]{4,103});
    states[103] = new State(new int[]{18,104});
    states[104] = new State(new int[]{29,82,30,83,32,84,31,85,21,87,20,93,28,98,4,100},new int[]{-10,105,-16,81,-17,86,-18,92,-19,97});
    states[105] = new State(new int[]{36,106});
    states[106] = new State(-12);
    states[107] = new State(-5);
    states[108] = new State(new int[]{4,109});
    states[109] = new State(new int[]{39,110});
    states[110] = new State(new int[]{4,184,38,-14},new int[]{-12,111,-14,179});
    states[111] = new State(new int[]{38,112});
    states[112] = new State(new int[]{35,79,18,-9},new int[]{-8,113});
    states[113] = new State(new int[]{18,114});
    states[114] = new State(-33,new int[]{-13,115});
    states[115] = new State(new int[]{14,116,17,6,19,102,4,124,22,143,15,149,12,156,11,164},new int[]{-4,117,-21,118,-6,5,-7,101,-22,119,-30,121,-23,136,-24,138,-25,140,-26,142,-27,148,-28,155,-29,163});
    states[116] = new State(-13);
    states[117] = new State(-34);
    states[118] = new State(-35);
    states[119] = new State(new int[]{36,120});
    states[120] = new State(-36);
    states[121] = new State(new int[]{37,122});
    states[122] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-11,123,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[123] = new State(-44);
    states[124] = new State(new int[]{43,125,44,126,33,59,41,63,39,128,37,-95,36,-48},new int[]{-47,56,-31,127,-48,57,-49,61});
    states[125] = new State(-45);
    states[126] = new State(-46);
    states[127] = new State(-47);
    states[128] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-32,129,-11,131,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[129] = new State(new int[]{38,130});
    states[130] = new State(-49);
    states[131] = new State(new int[]{34,133,38,-51},new int[]{-33,132});
    states[132] = new State(-50);
    states[133] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-11,134,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[134] = new State(new int[]{34,133,38,-51},new int[]{-33,135});
    states[135] = new State(-52);
    states[136] = new State(new int[]{36,137});
    states[137] = new State(-37);
    states[138] = new State(new int[]{36,139});
    states[139] = new State(-38);
    states[140] = new State(new int[]{36,141});
    states[141] = new State(-39);
    states[142] = new State(-40);
    states[143] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-11,144,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[144] = new State(new int[]{16,145});
    states[145] = new State(-33,new int[]{-13,146});
    states[146] = new State(new int[]{14,147,17,6,19,102,4,124,22,143,15,149,12,156,11,164},new int[]{-4,117,-21,118,-6,5,-7,101,-22,119,-30,121,-23,136,-24,138,-25,140,-26,142,-27,148,-28,155,-29,163});
    states[147] = new State(-53);
    states[148] = new State(-41);
    states[149] = new State(new int[]{4,150});
    states[150] = new State(new int[]{23,172},new int[]{-34,151});
    states[151] = new State(new int[]{16,152});
    states[152] = new State(-33,new int[]{-13,153});
    states[153] = new State(new int[]{14,154,17,6,19,102,4,124,22,143,15,149,12,156,11,164},new int[]{-4,117,-21,118,-6,5,-7,101,-22,119,-30,121,-23,136,-24,138,-25,140,-26,142,-27,148,-28,155,-29,163});
    states[154] = new State(-54);
    states[155] = new State(-42);
    states[156] = new State(new int[]{4,157});
    states[157] = new State(new int[]{13,158});
    states[158] = new State(new int[]{4,55},new int[]{-30,159});
    states[159] = new State(new int[]{16,160});
    states[160] = new State(-33,new int[]{-13,161});
    states[161] = new State(new int[]{14,162,17,6,19,102,4,124,22,143,15,149,12,156,11,164},new int[]{-4,117,-21,118,-6,5,-7,101,-22,119,-30,121,-23,136,-24,138,-25,140,-26,142,-27,148,-28,155,-29,163});
    states[162] = new State(-59);
    states[163] = new State(-43);
    states[164] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-11,165,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[165] = new State(new int[]{25,166});
    states[166] = new State(-33,new int[]{-13,167});
    states[167] = new State(new int[]{26,170,17,6,19,102,4,124,22,143,15,149,12,156,11,164,14,-61},new int[]{-37,168,-4,117,-21,118,-6,5,-7,101,-22,119,-30,121,-23,136,-24,138,-25,140,-26,142,-27,148,-28,155,-29,163});
    states[168] = new State(new int[]{14,169});
    states[169] = new State(-60);
    states[170] = new State(-33,new int[]{-13,171});
    states[171] = new State(new int[]{17,6,19,102,4,124,22,143,15,149,12,156,11,164,14,-62},new int[]{-4,117,-21,118,-6,5,-7,101,-22,119,-30,121,-23,136,-24,138,-25,140,-26,142,-27,148,-28,155,-29,163});
    states[172] = new State(new int[]{24,178,5,-56,6,-56,7,-56,8,-56,9,-56,10,-56,4,-56,39,-56},new int[]{-35,173});
    states[173] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-36,174,-11,175,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[174] = new State(-55);
    states[175] = new State(new int[]{58,176});
    states[176] = new State(new int[]{5,48,6,49,7,50,8,51,9,52,10,53,4,55,39,66},new int[]{-11,177,-38,13,-40,24,-42,28,-44,39,-46,47,-30,54});
    states[177] = new State(-58);
    states[178] = new State(-57);
    states[179] = new State(new int[]{34,181,38,-16},new int[]{-15,180});
    states[180] = new State(-15);
    states[181] = new State(new int[]{4,184},new int[]{-14,182});
    states[182] = new State(new int[]{34,181,38,-16},new int[]{-15,183});
    states[183] = new State(-17);
    states[184] = new State(new int[]{35,185});
    states[185] = new State(new int[]{29,82,30,83,32,84,31,85,21,87,20,93,28,98,4,100},new int[]{-10,186,-16,81,-17,86,-18,92,-19,97});
    states[186] = new State(-18);
    states[187] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-1,-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-6});
    rules[7] = new Rule(-4, new int[]{-7});
    rules[8] = new Rule(-6, new int[]{17,4,-8,-9,36});
    rules[9] = new Rule(-8, new int[]{});
    rules[10] = new Rule(-8, new int[]{35,-10});
    rules[11] = new Rule(-9, new int[]{18,-11});
    rules[12] = new Rule(-7, new int[]{19,4,18,-10,36});
    rules[13] = new Rule(-5, new int[]{27,4,39,-12,38,-8,18,-13,14});
    rules[14] = new Rule(-12, new int[]{});
    rules[15] = new Rule(-12, new int[]{-14,-15});
    rules[16] = new Rule(-15, new int[]{});
    rules[17] = new Rule(-15, new int[]{34,-14,-15});
    rules[18] = new Rule(-14, new int[]{4,35,-10});
    rules[19] = new Rule(-10, new int[]{-16});
    rules[20] = new Rule(-10, new int[]{-17});
    rules[21] = new Rule(-10, new int[]{-18});
    rules[22] = new Rule(-10, new int[]{-19});
    rules[23] = new Rule(-10, new int[]{4});
    rules[24] = new Rule(-16, new int[]{29});
    rules[25] = new Rule(-16, new int[]{30});
    rules[26] = new Rule(-16, new int[]{32});
    rules[27] = new Rule(-16, new int[]{31});
    rules[28] = new Rule(-17, new int[]{21,41,-11,40,-10});
    rules[29] = new Rule(-18, new int[]{20,-20,14});
    rules[30] = new Rule(-19, new int[]{28,-16});
    rules[31] = new Rule(-20, new int[]{});
    rules[32] = new Rule(-20, new int[]{-20,-6});
    rules[33] = new Rule(-13, new int[]{});
    rules[34] = new Rule(-13, new int[]{-13,-4});
    rules[35] = new Rule(-13, new int[]{-13,-21});
    rules[36] = new Rule(-21, new int[]{-22,36});
    rules[37] = new Rule(-21, new int[]{-23,36});
    rules[38] = new Rule(-21, new int[]{-24,36});
    rules[39] = new Rule(-21, new int[]{-25,36});
    rules[40] = new Rule(-21, new int[]{-26});
    rules[41] = new Rule(-21, new int[]{-27});
    rules[42] = new Rule(-21, new int[]{-28});
    rules[43] = new Rule(-21, new int[]{-29});
    rules[44] = new Rule(-22, new int[]{-30,37,-11});
    rules[45] = new Rule(-23, new int[]{4,43});
    rules[46] = new Rule(-24, new int[]{4,44});
    rules[47] = new Rule(-25, new int[]{4,-31});
    rules[48] = new Rule(-31, new int[]{});
    rules[49] = new Rule(-31, new int[]{39,-32,38});
    rules[50] = new Rule(-32, new int[]{-11,-33});
    rules[51] = new Rule(-33, new int[]{});
    rules[52] = new Rule(-33, new int[]{34,-11,-33});
    rules[53] = new Rule(-26, new int[]{22,-11,16,-13,14});
    rules[54] = new Rule(-27, new int[]{15,4,-34,16,-13,14});
    rules[55] = new Rule(-34, new int[]{23,-35,-36});
    rules[56] = new Rule(-35, new int[]{});
    rules[57] = new Rule(-35, new int[]{24});
    rules[58] = new Rule(-36, new int[]{-11,58,-11});
    rules[59] = new Rule(-28, new int[]{12,4,13,-30,16,-13,14});
    rules[60] = new Rule(-29, new int[]{11,-11,25,-13,-37,14});
    rules[61] = new Rule(-37, new int[]{});
    rules[62] = new Rule(-37, new int[]{26,-13});
    rules[63] = new Rule(-11, new int[]{-38,-39});
    rules[64] = new Rule(-39, new int[]{});
    rules[65] = new Rule(-39, new int[]{55,-38,-39});
    rules[66] = new Rule(-39, new int[]{56,-38,-39});
    rules[67] = new Rule(-39, new int[]{57,-38,-39});
    rules[68] = new Rule(-38, new int[]{-40,-41});
    rules[69] = new Rule(-41, new int[]{});
    rules[70] = new Rule(-41, new int[]{52,-40});
    rules[71] = new Rule(-41, new int[]{50,-40});
    rules[72] = new Rule(-41, new int[]{53,-40});
    rules[73] = new Rule(-41, new int[]{51,-40});
    rules[74] = new Rule(-41, new int[]{42,-40});
    rules[75] = new Rule(-41, new int[]{54,-40});
    rules[76] = new Rule(-40, new int[]{-42,-43});
    rules[77] = new Rule(-43, new int[]{});
    rules[78] = new Rule(-43, new int[]{47,-42,-43});
    rules[79] = new Rule(-43, new int[]{48,-42,-43});
    rules[80] = new Rule(-43, new int[]{49,-42,-43});
    rules[81] = new Rule(-42, new int[]{-44,-45});
    rules[82] = new Rule(-45, new int[]{});
    rules[83] = new Rule(-45, new int[]{46,-44,-45});
    rules[84] = new Rule(-45, new int[]{45,-44,-45});
    rules[85] = new Rule(-44, new int[]{-46});
    rules[86] = new Rule(-44, new int[]{39,-11,38});
    rules[87] = new Rule(-46, new int[]{5});
    rules[88] = new Rule(-46, new int[]{6});
    rules[89] = new Rule(-46, new int[]{7});
    rules[90] = new Rule(-46, new int[]{8});
    rules[91] = new Rule(-46, new int[]{9});
    rules[92] = new Rule(-46, new int[]{10});
    rules[93] = new Rule(-46, new int[]{-30});
    rules[94] = new Rule(-30, new int[]{4,-47});
    rules[95] = new Rule(-47, new int[]{});
    rules[96] = new Rule(-47, new int[]{-48,-47});
    rules[97] = new Rule(-47, new int[]{-49,-47});
    rules[98] = new Rule(-48, new int[]{33,4});
    rules[99] = new Rule(-49, new int[]{41,-11,40});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> Declaration
#line 86 "../grammar.y"
                          { CurrentSemanticValue = MakeProgram(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 3: // Program -> Program, Declaration
#line 87 "../grammar.y"
                          { CurrentSemanticValue = AddToProgram(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 4: // Declaration -> SimpleDeclaration
#line 92 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 5: // Declaration -> RoutineDeclaration
#line 93 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 6: // SimpleDeclaration -> VariableDeclaration
#line 97 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 7: // SimpleDeclaration -> TypeDeclaration
#line 98 "../grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 8: // VariableDeclaration -> VAR, IDENTIFIER, TypeTail, VariableInitializationTail, 
          //                        SEMICOLON
#line 102 "../grammar.y"
      {
          CurrentSemanticValue = MakeVariableDeclaration(ValueStack[ValueStack.Depth - 4],
              ValueStack[ValueStack.Depth - 3], ValueStack[ValueStack.Depth - 2]); }
#line default
        break;
      case 9: // TypeTail -> /* empty */
#line 107 "../grammar.y"
                    { CurrentSemanticValue = null; }
#line default
        break;
      case 10: // TypeTail -> COLON, Type
#line 108 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 11: // VariableInitializationTail -> IS, Expression
#line 113 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 12: // TypeDeclaration -> TYPE, IDENTIFIER, IS, Type, SEMICOLON
#line 118 "../grammar.y"
                                         { CurrentSemanticValue = MakeTypeDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 13: // RoutineDeclaration -> ROUTINE, IDENTIFIER, OPEN_PARENTHESIS, Parameters, 
               //                       CLOSE_PARENTHESIS, TypeTail, IS, Body, END
#line 123 "../grammar.y"
                                                                                            { CurrentSemanticValue = MakeRoutineDeclaration(ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 14: // Parameters -> /* empty */
#line 128 "../grammar.y"
                                            { CurrentSemanticValue = MakeParameters(); }
#line default
        break;
      case 15: // Parameters -> ParameterDeclaration, ParametersTail
#line 129 "../grammar.y"
                                            { CurrentSemanticValue = MakeParameters(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 16: // ParametersTail -> /* empty */
#line 134 "../grammar.y"
                                                { CurrentSemanticValue = MakeParametersTail(); }
#line default
        break;
      case 17: // ParametersTail -> COMMA, ParameterDeclaration, ParametersTail
#line 135 "../grammar.y"
                                                { CurrentSemanticValue = AddToParametersTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 18: // ParameterDeclaration -> IDENTIFIER, COLON, Type
#line 140 "../grammar.y"
                            { CurrentSemanticValue = MakeParameterDeclaration(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 19: // Type -> PrimitiveType
#line 145 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 20: // Type -> ArrayType
#line 146 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 21: // Type -> RecordType
#line 147 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 22: // Type -> RefType
#line 148 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 23: // Type -> IDENTIFIER
#line 149 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 24: // PrimitiveType -> INTEGER
#line 154 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 25: // PrimitiveType -> REAL
#line 155 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 26: // PrimitiveType -> BOOLEAN
#line 156 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 27: // PrimitiveType -> CHAR
#line 157 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 28: // ArrayType -> ARRAY, OPEN_BRACKET, Expression, CLOSE_BRACKET, Type
#line 162 "../grammar.y"
                                                       { CurrentSemanticValue = MakeArrayType(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 29: // RecordType -> RECORD, RecordVariableDeclarations, END
#line 167 "../grammar.y"
                                            { CurrentSemanticValue = MakeRecordType(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 30: // RefType -> REF, PrimitiveType
#line 171 "../grammar.y"
                        { CurrentSemanticValue = MakeRef(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 31: // RecordVariableDeclarations -> /* empty */
#line 176 "../grammar.y"
                                                        { CurrentSemanticValue = MakeVariableDeclarations(); }
#line default
        break;
      case 32: // RecordVariableDeclarations -> RecordVariableDeclarations, VariableDeclaration
#line 177 "../grammar.y"
                                                        { CurrentSemanticValue = AddToVariableDeclarations(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 33: // Body -> /* empty */
#line 182 "../grammar.y"
                                { CurrentSemanticValue = MakeBody(); }
#line default
        break;
      case 34: // Body -> Body, SimpleDeclaration
#line 183 "../grammar.y"
                                { CurrentSemanticValue = AddSimpleDeclarationToBody(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 35: // Body -> Body, Statement
#line 184 "../grammar.y"
                                { CurrentSemanticValue = AddStatementToBody(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 36: // Statement -> Assignment, SEMICOLON
#line 189 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 37: // Statement -> Increment, SEMICOLON
#line 190 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 38: // Statement -> Decrement, SEMICOLON
#line 191 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 39: // Statement -> RoutineCall, SEMICOLON
#line 192 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 40: // Statement -> WhileLoop
#line 193 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 41: // Statement -> ForLoop
#line 194 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 42: // Statement -> ForeachLoop
#line 195 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 43: // Statement -> IfStatement
#line 196 "../grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 44: // Assignment -> ModifiablePrimary, ASSIGNMENT_OP, Expression
#line 201 "../grammar.y"
                                                    { CurrentSemanticValue = MakeAssignment(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 45: // Increment -> IDENTIFIER, INCREMENT
#line 205 "../grammar.y"
                            { CurrentSemanticValue = MakeIncrement(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 46: // Decrement -> IDENTIFIER, DECREMENT
#line 209 "../grammar.y"
                            { CurrentSemanticValue = MakeDecrement(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 47: // RoutineCall -> IDENTIFIER, RoutineCallParameters
#line 214 "../grammar.y"
                                        { CurrentSemanticValue = MakeRoutineCall(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 48: // RoutineCallParameters -> /* empty */
#line 219 "../grammar.y"
                                                        { CurrentSemanticValue = MakeRoutineCallParameters(); }
#line default
        break;
      case 49: // RoutineCallParameters -> OPEN_PARENTHESIS, Expressions, CLOSE_PARENTHESIS
#line 220 "../grammar.y"
                                                        { CurrentSemanticValue = MakeRoutineCallParameters(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 50: // Expressions -> Expression, ExpressionsTail
#line 225 "../grammar.y"
                                    { CurrentSemanticValue = MakeExpressions(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 51: // ExpressionsTail -> /* empty */
#line 230 "../grammar.y"
                                        { CurrentSemanticValue = MakeExpressionTail(); }
#line default
        break;
      case 52: // ExpressionsTail -> COMMA, Expression, ExpressionsTail
#line 231 "../grammar.y"
                                        { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 53: // WhileLoop -> WHILE, Expression, LOOP, Body, END
#line 236 "../grammar.y"
                                        { CurrentSemanticValue = MakeWhileLoop(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 54: // ForLoop -> FOR, IDENTIFIER, Range, LOOP, Body, END
#line 241 "../grammar.y"
                                            { CurrentSemanticValue = MakeForLoop(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 55: // Range -> IN, Reverse, RangeExpression
#line 246 "../grammar.y"
                                    { CurrentSemanticValue = MakeRange(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 56: // Reverse -> /* empty */
#line 251 "../grammar.y"
                    { CurrentSemanticValue = null; }
#line default
        break;
      case 57: // Reverse -> REVERSE
#line 252 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 58: // RangeExpression -> Expression, RANGE, Expression
#line 257 "../grammar.y"
                                    { CurrentSemanticValue = MakeRangeExpression(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 59: // ForeachLoop -> FOREACH, IDENTIFIER, FROM, ModifiablePrimary, LOOP, Body, END
#line 262 "../grammar.y"
                                                                { CurrentSemanticValue = MakeForEachLoop(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 60: // IfStatement -> IF, Expression, THEN, Body, ElseTail, END
#line 267 "../grammar.y"
                                            { CurrentSemanticValue = MakeIfStatement(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 61: // ElseTail -> /* empty */
#line 272 "../grammar.y"
                    { CurrentSemanticValue = null; }
#line default
        break;
      case 62: // ElseTail -> ELSE, Body
#line 273 "../grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 63: // Expression -> Relation, ExpressionTail
#line 278 "../grammar.y"
                                { CurrentSemanticValue = MakeExpression(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 64: // ExpressionTail -> /* empty */
#line 283 "../grammar.y"
                  { CurrentSemanticValue = MakeExpressionTail(); }
#line default
        break;
      case 65: // ExpressionTail -> AND, Relation, ExpressionTail
#line 284 "../grammar.y"
                                    { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 66: // ExpressionTail -> OR, Relation, ExpressionTail
#line 285 "../grammar.y"
                                    { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 67: // ExpressionTail -> XOR, Relation, ExpressionTail
#line 286 "../grammar.y"
                                    { CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 68: // Relation -> Simple, RelationTail
#line 291 "../grammar.y"
                          { CurrentSemanticValue = MakeRelation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 69: // RelationTail -> /* empty */
#line 296 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail();       }
#line default
        break;
      case 70: // RelationTail -> LESS, Simple
#line 297 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 71: // RelationTail -> LESS_EQUAL, Simple
#line 298 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 72: // RelationTail -> GREATER, Simple
#line 299 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 73: // RelationTail -> GREATER_EQUAL, Simple
#line 300 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 74: // RelationTail -> EQUAL, Simple
#line 301 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 75: // RelationTail -> NOT_EQUAL, Simple
#line 302 "../grammar.y"
                            { CurrentSemanticValue = MakeRelationTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 76: // Simple -> Factor, SimpleTail
#line 307 "../grammar.y"
                        { CurrentSemanticValue = MakeSimple(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 77: // SimpleTail -> /* empty */
#line 312 "../grammar.y"
                                    { CurrentSemanticValue = MakeSimpleTail();            }
#line default
        break;
      case 78: // SimpleTail -> MULTIPLY, Factor, SimpleTail
#line 313 "../grammar.y"
                                    { CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 79: // SimpleTail -> DIVIDE, Factor, SimpleTail
#line 314 "../grammar.y"
                                    { CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 80: // SimpleTail -> MOD, Factor, SimpleTail
#line 315 "../grammar.y"
                                    { CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 81: // Factor -> Summand, FactorTail
#line 320 "../grammar.y"
                            { CurrentSemanticValue = MakeFactor(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 82: // FactorTail -> /* empty */
#line 325 "../grammar.y"
                                { CurrentSemanticValue = MakeFactorTail(); }
#line default
        break;
      case 83: // FactorTail -> PLUS, Summand, FactorTail
#line 326 "../grammar.y"
                                { CurrentSemanticValue = AddToFactorTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 84: // FactorTail -> MINUS, Summand, FactorTail
#line 327 "../grammar.y"
                                { CurrentSemanticValue = AddToFactorTail(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 85: // Summand -> Primary
#line 332 "../grammar.y"
                                                    { CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 86: // Summand -> OPEN_PARENTHESIS, Expression, CLOSE_PARENTHESIS
#line 333 "../grammar.y"
                                                    { CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 87: // Primary -> INTEGER_LITERAL
#line 338 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 88: // Primary -> REAL_LITERAL
#line 339 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 89: // Primary -> CHAR_LITERAL
#line 340 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 90: // Primary -> STRING_LITERAL
#line 341 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 91: // Primary -> TRUE
#line 342 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 92: // Primary -> FALSE
#line 343 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 93: // Primary -> ModifiablePrimary
#line 344 "../grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 94: // ModifiablePrimary -> IDENTIFIER, ModifiablePrimaryTail
#line 349 "../grammar.y"
                                        { CurrentSemanticValue = MakeModifiablePrimary(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 95: // ModifiablePrimaryTail -> /* empty */
#line 354 "../grammar.y"
                                            { CurrentSemanticValue = MakeModifiablePrimaryTail(); }
#line default
        break;
      case 96: // ModifiablePrimaryTail -> MemberAccess, ModifiablePrimaryTail
#line 355 "../grammar.y"
                                            { CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 97: // ModifiablePrimaryTail -> ArrayAccess, ModifiablePrimaryTail
#line 356 "../grammar.y"
                                            { CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 98: // MemberAccess -> DOT, IDENTIFIER
#line 360 "../grammar.y"
                        { CurrentSemanticValue = MakeMemberAccess(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 99: // ArrayAccess -> OPEN_BRACKET, Expression, CLOSE_BRACKET
#line 364 "../grammar.y"
                                            { CurrentSemanticValue = MakeArrayAccess(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 368 "../grammar.y"
#line default
}
}
