// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-K87RABG
// DateTime: 13.10.2023 21:13:35
// UserName: under
// Input file <grammar.y - 13.10.2023 21:12:44>

// options: lines

using System.CodeDom.Compiler;
using System.Globalization;
using QUT.Gppg;

namespace PelmeniCompilers.Parser
{
    public enum Tokens
    {
        error = 2,
        EOF = 3,
        IDENTIFIER = 4,
        INTEGER_LITERAL = 5,
        REAL_LITERAL = 6,
        CHAR_LITERAL = 7,
        STRING_LITERAL = 8,
        TRUE = 9,
        FALSE = 10,
        IF = 11,
        FOREACH = 12,
        FROM = 13,
        END = 14,
        FOR = 15,
        LOOP = 16,
        VAR = 17,
        IS = 18,
        TYPE = 19,
        RECORD = 20,
        ARRAY = 21,
        WHILE = 22,
        IN = 23,
        REVERSE = 24,
        THEN = 25,
        ELSE = 26,
        ROUTINE = 27,
        INTEGER = 28,
        REAL = 29,
        CHAR = 30,
        BOOLEAN = 31,
        INTEGER_REF = 32,
        REAL_REF = 33,
        CHAR_REF = 34,
        BOOLEAN_REF = 35,
        DOT = 36,
        COMMA = 37,
        COLON = 38,
        SEMICOLON = 39,
        ASSIGNMENT_OP = 40,
        CLOSE_PARENTHESIS = 41,
        OPEN_PARENTHESIS = 42,
        CLOSE_BRACKET = 43,
        OPEN_BRACKET = 44,
        EQUAL = 45,
        INCREMENT = 46,
        DECREMENT = 47,
        MINUS = 48,
        PLUS = 49,
        MULTIPLY = 50,
        DIVIDE = 51,
        MOD = 52,
        LESS_EQUAL = 53,
        GREATER_EQUAL = 54,
        LESS = 55,
        GREATER = 56,
        NOT_EQUAL = 57,
        AND = 58,
        OR = 59,
        XOR = 60,
        RANGE = 61
    };

    [GeneratedCode("Gardens Point Parser Generator", "1.5.2")]
    public partial class Parser : ShiftReduceParser<Node, LexLocation>
    {
#pragma warning disable 649
        private static Dictionary<int, string>? _aliases;
#pragma warning restore 649
        private static readonly Rule[] Rules = new Rule[101];
        private static readonly QUT.Gppg.State[] States = new QUT.Gppg.State[187];

        private static readonly string[] NonTerms = {
            "Program", "$accept", "Declaration", "SimpleDeclaration", "RoutineDeclaration",
            "VariableDeclaration", "TypeDeclaration", "TypeTail", "VariableInitializationTail",
            "Type", "Expression", "Parameters", "Body", "ParameterDeclaration", "ParametersTail",
            "PrimitiveType", "ArrayType", "RecordType", "RecordVariableDeclarations",
            "Statement", "Assignment", "Increment", "Decrement", "RoutineCall", "WhileLoop",
            "ForLoop", "ForeachLoop", "IfStatement", "ModifiablePrimary", "RoutineCallParameters",
            "Expressions", "ExpressionsTail", "Range", "Reverse", "RangeExpression",
            "ElseTail", "Relation", "ExpressionTail", "Simple", "RelationTail", "Factor",
            "SimpleTail", "Summand", "FactorTail", "Primary", "ModifiablePrimaryTail",
            "MemberAccess", "ArrayAccess",
        };

        static Parser()
        {
            States[0] = new QUT.Gppg.State(new[] { 17, 6, 19, 102, 27, 107 },
                new[] { -1, 1, -3, 186, -4, 4, -6, 5, -7, 101, -5, 106 });
            States[1] = new QUT.Gppg.State(new[] { 3, 2, 17, 6, 19, 102, 27, 107 },
                new[] { -3, 3, -4, 4, -6, 5, -7, 101, -5, 106 });
            States[2] = new QUT.Gppg.State(-1);
            States[3] = new QUT.Gppg.State(-3);
            States[4] = new QUT.Gppg.State(-4);
            States[5] = new QUT.Gppg.State(-6);
            States[6] = new QUT.Gppg.State(new[] { 4, 7 });
            States[7] = new QUT.Gppg.State(new[] { 38, 78 }, new[] { -8, 8 });
            States[8] = new QUT.Gppg.State(new[] { 18, 10 }, new[] { -9, 9 });
            States[9] = new QUT.Gppg.State(-8);
            States[10] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -11, 11, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[11] = new QUT.Gppg.State(-10);
            States[12] = new QUT.Gppg.State(
                new[]
                {
                    58, 14, 59, 17, 60, 20, 3, -65, 17, -65, 19, -65, 27, -65, 14, -65, 4, -65, 22, -65, 15, -65, 12,
                    -65, 11, -65, 26, -65, 43, -65, 41, -65, 39, -65, 37, -65, 16, -65, 25, -65, 61, -65
                }, new[] { -38, 13 });
            States[13] = new QUT.Gppg.State(-64);
            States[14] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -37, 15, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[15] = new QUT.Gppg.State(
                new[]
                {
                    58, 14, 59, 17, 60, 20, 3, -65, 17, -65, 19, -65, 27, -65, 14, -65, 4, -65, 22, -65, 15, -65, 12,
                    -65, 11, -65, 26, -65, 43, -65, 41, -65, 39, -65, 37, -65, 16, -65, 25, -65, 61, -65
                }, new[] { -38, 16 });
            States[16] = new QUT.Gppg.State(-66);
            States[17] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -37, 18, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[18] = new QUT.Gppg.State(
                new[]
                {
                    58, 14, 59, 17, 60, 20, 3, -65, 17, -65, 19, -65, 27, -65, 14, -65, 4, -65, 22, -65, 15, -65, 12,
                    -65, 11, -65, 26, -65, 43, -65, 41, -65, 39, -65, 37, -65, 16, -65, 25, -65, 61, -65
                }, new[] { -38, 19 });
            States[19] = new QUT.Gppg.State(-67);
            States[20] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -37, 21, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[21] = new QUT.Gppg.State(
                new[]
                {
                    58, 14, 59, 17, 60, 20, 3, -65, 17, -65, 19, -65, 27, -65, 14, -65, 4, -65, 22, -65, 15, -65, 12,
                    -65, 11, -65, 26, -65, 43, -65, 41, -65, 39, -65, 37, -65, 16, -65, 25, -65, 61, -65
                }, new[] { -38, 22 });
            States[22] = new QUT.Gppg.State(-68);
            States[23] = new QUT.Gppg.State(
                new[]
                {
                    55, 25, 53, 68, 56, 70, 54, 72, 45, 74, 57, 76, 58, -70, 59, -70, 60, -70, 3, -70, 17, -70, 19, -70,
                    27, -70, 14, -70, 4, -70, 22, -70, 15, -70, 12, -70, 11, -70, 26, -70, 43, -70, 41, -70, 39, -70,
                    37, -70, 16, -70, 25, -70, 61, -70
                }, new[] { -40, 24 });
            States[24] = new QUT.Gppg.State(-69);
            States[25] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -39, 26, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[26] = new QUT.Gppg.State(-71);
            States[27] = new QUT.Gppg.State(
                new[]
                {
                    50, 29, 51, 32, 52, 35, 55, -78, 53, -78, 56, -78, 54, -78, 45, -78, 57, -78, 58, -78, 59, -78, 60,
                    -78, 3, -78, 17, -78, 19, -78, 27, -78, 14, -78, 4, -78, 22, -78, 15, -78, 12, -78, 11, -78, 26,
                    -78, 43, -78, 41, -78, 39, -78, 37, -78, 16, -78, 25, -78, 61, -78
                }, new[] { -42, 28 });
            States[28] = new QUT.Gppg.State(-77);
            States[29] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -41, 30, -43, 38, -45, 46, -29, 53 });
            States[30] = new QUT.Gppg.State(
                new[]
                {
                    50, 29, 51, 32, 52, 35, 55, -78, 53, -78, 56, -78, 54, -78, 45, -78, 57, -78, 58, -78, 59, -78, 60,
                    -78, 3, -78, 17, -78, 19, -78, 27, -78, 14, -78, 4, -78, 22, -78, 15, -78, 12, -78, 11, -78, 26,
                    -78, 43, -78, 41, -78, 39, -78, 37, -78, 16, -78, 25, -78, 61, -78
                }, new[] { -42, 31 });
            States[31] = new QUT.Gppg.State(-79);
            States[32] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -41, 33, -43, 38, -45, 46, -29, 53 });
            States[33] = new QUT.Gppg.State(
                new[]
                {
                    50, 29, 51, 32, 52, 35, 55, -78, 53, -78, 56, -78, 54, -78, 45, -78, 57, -78, 58, -78, 59, -78, 60,
                    -78, 3, -78, 17, -78, 19, -78, 27, -78, 14, -78, 4, -78, 22, -78, 15, -78, 12, -78, 11, -78, 26,
                    -78, 43, -78, 41, -78, 39, -78, 37, -78, 16, -78, 25, -78, 61, -78
                }, new[] { -42, 34 });
            States[34] = new QUT.Gppg.State(-80);
            States[35] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -41, 36, -43, 38, -45, 46, -29, 53 });
            States[36] = new QUT.Gppg.State(
                new[]
                {
                    50, 29, 51, 32, 52, 35, 55, -78, 53, -78, 56, -78, 54, -78, 45, -78, 57, -78, 58, -78, 59, -78, 60,
                    -78, 3, -78, 17, -78, 19, -78, 27, -78, 14, -78, 4, -78, 22, -78, 15, -78, 12, -78, 11, -78, 26,
                    -78, 43, -78, 41, -78, 39, -78, 37, -78, 16, -78, 25, -78, 61, -78
                }, new[] { -42, 37 });
            States[37] = new QUT.Gppg.State(-81);
            States[38] = new QUT.Gppg.State(
                new[]
                {
                    49, 40, 48, 43, 50, -83, 51, -83, 52, -83, 55, -83, 53, -83, 56, -83, 54, -83, 45, -83, 57, -83, 58,
                    -83, 59, -83, 60, -83, 3, -83, 17, -83, 19, -83, 27, -83, 14, -83, 4, -83, 22, -83, 15, -83, 12,
                    -83, 11, -83, 26, -83, 43, -83, 41, -83, 39, -83, 37, -83, 16, -83, 25, -83, 61, -83
                }, new[] { -44, 39 });
            States[39] = new QUT.Gppg.State(-82);
            States[40] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -43, 41, -45, 46, -29, 53 });
            States[41] = new QUT.Gppg.State(
                new[]
                {
                    49, 40, 48, 43, 50, -83, 51, -83, 52, -83, 55, -83, 53, -83, 56, -83, 54, -83, 45, -83, 57, -83, 58,
                    -83, 59, -83, 60, -83, 3, -83, 17, -83, 19, -83, 27, -83, 14, -83, 4, -83, 22, -83, 15, -83, 12,
                    -83, 11, -83, 26, -83, 43, -83, 41, -83, 39, -83, 37, -83, 16, -83, 25, -83, 61, -83
                }, new[] { -44, 42 });
            States[42] = new QUT.Gppg.State(-84);
            States[43] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -43, 44, -45, 46, -29, 53 });
            States[44] = new QUT.Gppg.State(
                new[]
                {
                    49, 40, 48, 43, 50, -83, 51, -83, 52, -83, 55, -83, 53, -83, 56, -83, 54, -83, 45, -83, 57, -83, 58,
                    -83, 59, -83, 60, -83, 3, -83, 17, -83, 19, -83, 27, -83, 14, -83, 4, -83, 22, -83, 15, -83, 12,
                    -83, 11, -83, 26, -83, 43, -83, 41, -83, 39, -83, 37, -83, 16, -83, 25, -83, 61, -83
                }, new[] { -44, 45 });
            States[45] = new QUT.Gppg.State(-85);
            States[46] = new QUT.Gppg.State(-86);
            States[47] = new QUT.Gppg.State(-88);
            States[48] = new QUT.Gppg.State(-89);
            States[49] = new QUT.Gppg.State(-90);
            States[50] = new QUT.Gppg.State(-91);
            States[51] = new QUT.Gppg.State(-92);
            States[52] = new QUT.Gppg.State(-93);
            States[53] = new QUT.Gppg.State(-94);
            States[54] = new QUT.Gppg.State(
                new[]
                {
                    36, 58, 44, 62, 49, -96, 48, -96, 50, -96, 51, -96, 52, -96, 55, -96, 53, -96, 56, -96, 54, -96, 45,
                    -96, 57, -96, 58, -96, 59, -96, 60, -96, 3, -96, 17, -96, 19, -96, 27, -96, 14, -96, 4, -96, 22,
                    -96, 15, -96, 12, -96, 11, -96, 26, -96, 43, -96, 41, -96, 39, -96, 37, -96, 16, -96, 25, -96, 61,
                    -96
                }, new[] { -46, 55, -47, 56, -48, 60 });
            States[55] = new QUT.Gppg.State(-95);
            States[56] = new QUT.Gppg.State(
                new[]
                {
                    36, 58, 44, 62, 49, -96, 48, -96, 50, -96, 51, -96, 52, -96, 55, -96, 53, -96, 56, -96, 54, -96, 45,
                    -96, 57, -96, 58, -96, 59, -96, 60, -96, 3, -96, 17, -96, 19, -96, 27, -96, 14, -96, 4, -96, 22,
                    -96, 15, -96, 12, -96, 11, -96, 26, -96, 43, -96, 41, -96, 39, -96, 37, -96, 16, -96, 25, -96, 61,
                    -96, 40, -96
                }, new[] { -46, 57, -47, 56, -48, 60 });
            States[57] = new QUT.Gppg.State(-97);
            States[58] = new QUT.Gppg.State(new[] { 4, 59 });
            States[59] = new QUT.Gppg.State(-99);
            States[60] = new QUT.Gppg.State(
                new[]
                {
                    36, 58, 44, 62, 49, -96, 48, -96, 50, -96, 51, -96, 52, -96, 55, -96, 53, -96, 56, -96, 54, -96, 45,
                    -96, 57, -96, 58, -96, 59, -96, 60, -96, 3, -96, 17, -96, 19, -96, 27, -96, 14, -96, 4, -96, 22,
                    -96, 15, -96, 12, -96, 11, -96, 26, -96, 43, -96, 41, -96, 39, -96, 37, -96, 16, -96, 25, -96, 61,
                    -96, 40, -96
                }, new[] { -46, 61, -47, 56, -48, 60 });
            States[61] = new QUT.Gppg.State(-98);
            States[62] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -11, 63, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[63] = new QUT.Gppg.State(new[] { 43, 64 });
            States[64] = new QUT.Gppg.State(-100);
            States[65] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -11, 66, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[66] = new QUT.Gppg.State(new[] { 41, 67 });
            States[67] = new QUT.Gppg.State(-87);
            States[68] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -39, 69, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[69] = new QUT.Gppg.State(-72);
            States[70] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -39, 71, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[71] = new QUT.Gppg.State(-73);
            States[72] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -39, 73, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[73] = new QUT.Gppg.State(-74);
            States[74] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -39, 75, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[75] = new QUT.Gppg.State(-75);
            States[76] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -39, 77, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[77] = new QUT.Gppg.State(-76);
            States[78] =
                new QUT.Gppg.State(
                    new[]
                    {
                        28, 81, 29, 82, 31, 83, 30, 84, 32, 85, 33, 86, 35, 87, 34, 88, 21, 90, 20, 96, 4, 100
                    }, new[] { -10, 79, -16, 80, -17, 89, -18, 95 });
            States[79] = new QUT.Gppg.State(-9);
            States[80] = new QUT.Gppg.State(-18);
            States[81] = new QUT.Gppg.State(-22);
            States[82] = new QUT.Gppg.State(-23);
            States[83] = new QUT.Gppg.State(-24);
            States[84] = new QUT.Gppg.State(-25);
            States[85] = new QUT.Gppg.State(-26);
            States[86] = new QUT.Gppg.State(-27);
            States[87] = new QUT.Gppg.State(-28);
            States[88] = new QUT.Gppg.State(-29);
            States[89] = new QUT.Gppg.State(-19);
            States[90] = new QUT.Gppg.State(new[] { 44, 91 });
            States[91] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -11, 92, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[92] = new QUT.Gppg.State(new[] { 43, 93 });
            States[93] =
                new QUT.Gppg.State(
                    new[]
                    {
                        28, 81, 29, 82, 31, 83, 30, 84, 32, 85, 33, 86, 35, 87, 34, 88, 21, 90, 20, 96, 4, 100
                    }, new[] { -10, 94, -16, 80, -17, 89, -18, 95 });
            States[94] = new QUT.Gppg.State(-30);
            States[95] = new QUT.Gppg.State(-20);
            States[96] = new QUT.Gppg.State(-32, new[] { -19, 97 });
            States[97] = new QUT.Gppg.State(new[] { 14, 98, 17, 6 }, new[] { -6, 99 });
            States[98] = new QUT.Gppg.State(-31);
            States[99] = new QUT.Gppg.State(-33);
            States[100] = new QUT.Gppg.State(-21);
            States[101] = new QUT.Gppg.State(-7);
            States[102] = new QUT.Gppg.State(new[] { 4, 103 });
            States[103] = new QUT.Gppg.State(new[] { 18, 104 });
            States[104] =
                new QUT.Gppg.State(
                    new[]
                    {
                        28, 81, 29, 82, 31, 83, 30, 84, 32, 85, 33, 86, 35, 87, 34, 88, 21, 90, 20, 96, 4, 100
                    }, new[] { -10, 105, -16, 80, -17, 89, -18, 95 });
            States[105] = new QUT.Gppg.State(-11);
            States[106] = new QUT.Gppg.State(-5);
            States[107] = new QUT.Gppg.State(new[] { 4, 108 });
            States[108] = new QUT.Gppg.State(new[] { 42, 109 });
            States[109] = new QUT.Gppg.State(new[] { 4, 183, 41, -13 }, new[] { -12, 110, -14, 178 });
            States[110] = new QUT.Gppg.State(new[] { 41, 111 });
            States[111] = new QUT.Gppg.State(new[] { 38, 78 }, new[] { -8, 112 });
            States[112] = new QUT.Gppg.State(new[] { 18, 113 });
            States[113] = new QUT.Gppg.State(-34, new[] { -13, 114 });
            States[114] = new QUT.Gppg.State(
                new[] { 14, 115, 17, 6, 19, 102, 4, 123, 22, 142, 15, 148, 12, 155, 11, 163 },
                new[]
                {
                    -4, 116, -20, 117, -6, 5, -7, 101, -21, 118, -29, 120, -22, 135, -23, 137, -24, 139, -25, 141, -26,
                    147, -27, 154, -28, 162
                });
            States[115] = new QUT.Gppg.State(-12);
            States[116] = new QUT.Gppg.State(-35);
            States[117] = new QUT.Gppg.State(-36);
            States[118] = new QUT.Gppg.State(new[] { 39, 119 });
            States[119] = new QUT.Gppg.State(-37);
            States[120] = new QUT.Gppg.State(new[] { 40, 121 });
            States[121] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -11, 122, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[122] = new QUT.Gppg.State(-45);
            States[123] = new QUT.Gppg.State(new[] { 46, 124, 47, 125, 36, 58, 44, 62, 42, 127, 40, -96, 39, -49 },
                new[] { -46, 55, -30, 126, -47, 56, -48, 60 });
            States[124] = new QUT.Gppg.State(-46);
            States[125] = new QUT.Gppg.State(-47);
            States[126] = new QUT.Gppg.State(-48);
            States[127] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -31, 128, -11, 130, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[128] = new QUT.Gppg.State(new[] { 41, 129 });
            States[129] = new QUT.Gppg.State(-50);
            States[130] = new QUT.Gppg.State(new[] { 37, 132, 41, -52 }, new[] { -32, 131 });
            States[131] = new QUT.Gppg.State(-51);
            States[132] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -11, 133, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[133] = new QUT.Gppg.State(new[] { 37, 132, 41, -52 }, new[] { -32, 134 });
            States[134] = new QUT.Gppg.State(-53);
            States[135] = new QUT.Gppg.State(new[] { 39, 136 });
            States[136] = new QUT.Gppg.State(-38);
            States[137] = new QUT.Gppg.State(new[] { 39, 138 });
            States[138] = new QUT.Gppg.State(-39);
            States[139] = new QUT.Gppg.State(new[] { 39, 140 });
            States[140] = new QUT.Gppg.State(-40);
            States[141] = new QUT.Gppg.State(-41);
            States[142] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -11, 143, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[143] = new QUT.Gppg.State(new[] { 16, 144 });
            States[144] = new QUT.Gppg.State(-34, new[] { -13, 145 });
            States[145] = new QUT.Gppg.State(
                new[] { 14, 146, 17, 6, 19, 102, 4, 123, 22, 142, 15, 148, 12, 155, 11, 163 },
                new[]
                {
                    -4, 116, -20, 117, -6, 5, -7, 101, -21, 118, -29, 120, -22, 135, -23, 137, -24, 139, -25, 141, -26,
                    147, -27, 154, -28, 162
                });
            States[146] = new QUT.Gppg.State(-54);
            States[147] = new QUT.Gppg.State(-42);
            States[148] = new QUT.Gppg.State(new[] { 4, 149 });
            States[149] = new QUT.Gppg.State(new[] { 23, 171 }, new[] { -33, 150 });
            States[150] = new QUT.Gppg.State(new[] { 16, 151 });
            States[151] = new QUT.Gppg.State(-34, new[] { -13, 152 });
            States[152] = new QUT.Gppg.State(
                new[] { 14, 153, 17, 6, 19, 102, 4, 123, 22, 142, 15, 148, 12, 155, 11, 163 },
                new[]
                {
                    -4, 116, -20, 117, -6, 5, -7, 101, -21, 118, -29, 120, -22, 135, -23, 137, -24, 139, -25, 141, -26,
                    147, -27, 154, -28, 162
                });
            States[153] = new QUT.Gppg.State(-55);
            States[154] = new QUT.Gppg.State(-43);
            States[155] = new QUT.Gppg.State(new[] { 4, 156 });
            States[156] = new QUT.Gppg.State(new[] { 13, 157 });
            States[157] = new QUT.Gppg.State(new[] { 4, 54 }, new[] { -29, 158 });
            States[158] = new QUT.Gppg.State(new[] { 16, 159 });
            States[159] = new QUT.Gppg.State(-34, new[] { -13, 160 });
            States[160] = new QUT.Gppg.State(
                new[] { 14, 161, 17, 6, 19, 102, 4, 123, 22, 142, 15, 148, 12, 155, 11, 163 },
                new[]
                {
                    -4, 116, -20, 117, -6, 5, -7, 101, -21, 118, -29, 120, -22, 135, -23, 137, -24, 139, -25, 141, -26,
                    147, -27, 154, -28, 162
                });
            States[161] = new QUT.Gppg.State(-60);
            States[162] = new QUT.Gppg.State(-44);
            States[163] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -11, 164, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[164] = new QUT.Gppg.State(new[] { 25, 165 });
            States[165] = new QUT.Gppg.State(-34, new[] { -13, 166 });
            States[166] = new QUT.Gppg.State(
                new[] { 26, 169, 17, 6, 19, 102, 4, 123, 22, 142, 15, 148, 12, 155, 11, 163, 14, -62 },
                new[]
                {
                    -36, 167, -4, 116, -20, 117, -6, 5, -7, 101, -21, 118, -29, 120, -22, 135, -23, 137, -24, 139, -25,
                    141, -26, 147, -27, 154, -28, 162
                });
            States[167] = new QUT.Gppg.State(new[] { 14, 168 });
            States[168] = new QUT.Gppg.State(-61);
            States[169] = new QUT.Gppg.State(-34, new[] { -13, 170 });
            States[170] = new QUT.Gppg.State(
                new[] { 17, 6, 19, 102, 4, 123, 22, 142, 15, 148, 12, 155, 11, 163, 14, -63 },
                new[]
                {
                    -4, 116, -20, 117, -6, 5, -7, 101, -21, 118, -29, 120, -22, 135, -23, 137, -24, 139, -25, 141, -26,
                    147, -27, 154, -28, 162
                });
            States[171] =
                new QUT.Gppg.State(
                    new[] { 24, 177, 5, -57, 6, -57, 7, -57, 8, -57, 9, -57, 10, -57, 4, -57, 42, -57 },
                    new[] { -34, 172 });
            States[172] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -35, 173, -11, 174, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[173] = new QUT.Gppg.State(-56);
            States[174] = new QUT.Gppg.State(new[] { 61, 175 });
            States[175] = new QUT.Gppg.State(new[] { 5, 47, 6, 48, 7, 49, 8, 50, 9, 51, 10, 52, 4, 54, 42, 65 },
                new[] { -11, 176, -37, 12, -39, 23, -41, 27, -43, 38, -45, 46, -29, 53 });
            States[176] = new QUT.Gppg.State(-59);
            States[177] = new QUT.Gppg.State(-58);
            States[178] = new QUT.Gppg.State(new[] { 37, 180, 41, -15 }, new[] { -15, 179 });
            States[179] = new QUT.Gppg.State(-14);
            States[180] = new QUT.Gppg.State(new[] { 4, 183 }, new[] { -14, 181 });
            States[181] = new QUT.Gppg.State(new[] { 37, 180, 41, -15 }, new[] { -15, 182 });
            States[182] = new QUT.Gppg.State(-16);
            States[183] = new QUT.Gppg.State(new[] { 38, 184 });
            States[184] =
                new QUT.Gppg.State(
                    new[]
                    {
                        28, 81, 29, 82, 31, 83, 30, 84, 32, 85, 33, 86, 35, 87, 34, 88, 21, 90, 20, 96, 4, 100
                    }, new[] { -10, 185, -16, 80, -17, 89, -18, 95 });
            States[185] = new QUT.Gppg.State(-17);
            States[186] = new QUT.Gppg.State(-2);

            for (int sNo = 0; sNo < States.Length; sNo++) States[sNo].number = sNo;

            Rules[1] = new Rule(-2, new[] { -1, 3 });
            Rules[2] = new Rule(-1, new[] { -3 });
            Rules[3] = new Rule(-1, new[] { -1, -3 });
            Rules[4] = new Rule(-3, new[] { -4 });
            Rules[5] = new Rule(-3, new[] { -5 });
            Rules[6] = new Rule(-4, new[] { -6 });
            Rules[7] = new Rule(-4, new[] { -7 });
            Rules[8] = new Rule(-6, new[] { 17, 4, -8, -9 });
            Rules[9] = new Rule(-8, new[] { 38, -10 });
            Rules[10] = new Rule(-9, new[] { 18, -11 });
            Rules[11] = new Rule(-7, new[] { 19, 4, 18, -10 });
            Rules[12] = new Rule(-5, new[] { 27, 4, 42, -12, 41, -8, 18, -13, 14 });
            Rules[13] = new Rule(-12, new int[] { });
            Rules[14] = new Rule(-12, new[] { -14, -15 });
            Rules[15] = new Rule(-15, new int[] { });
            Rules[16] = new Rule(-15, new[] { 37, -14, -15 });
            Rules[17] = new Rule(-14, new[] { 4, 38, -10 });
            Rules[18] = new Rule(-10, new[] { -16 });
            Rules[19] = new Rule(-10, new[] { -17 });
            Rules[20] = new Rule(-10, new[] { -18 });
            Rules[21] = new Rule(-10, new[] { 4 });
            Rules[22] = new Rule(-16, new[] { 28 });
            Rules[23] = new Rule(-16, new[] { 29 });
            Rules[24] = new Rule(-16, new[] { 31 });
            Rules[25] = new Rule(-16, new[] { 30 });
            Rules[26] = new Rule(-16, new[] { 32 });
            Rules[27] = new Rule(-16, new[] { 33 });
            Rules[28] = new Rule(-16, new[] { 35 });
            Rules[29] = new Rule(-16, new[] { 34 });
            Rules[30] = new Rule(-17, new[] { 21, 44, -11, 43, -10 });
            Rules[31] = new Rule(-18, new[] { 20, -19, 14 });
            Rules[32] = new Rule(-19, new int[] { });
            Rules[33] = new Rule(-19, new[] { -19, -6 });
            Rules[34] = new Rule(-13, new int[] { });
            Rules[35] = new Rule(-13, new[] { -13, -4 });
            Rules[36] = new Rule(-13, new[] { -13, -20 });
            Rules[37] = new Rule(-20, new[] { -21, 39 });
            Rules[38] = new Rule(-20, new[] { -22, 39 });
            Rules[39] = new Rule(-20, new[] { -23, 39 });
            Rules[40] = new Rule(-20, new[] { -24, 39 });
            Rules[41] = new Rule(-20, new[] { -25 });
            Rules[42] = new Rule(-20, new[] { -26 });
            Rules[43] = new Rule(-20, new[] { -27 });
            Rules[44] = new Rule(-20, new[] { -28 });
            Rules[45] = new Rule(-21, new[] { -29, 40, -11 });
            Rules[46] = new Rule(-22, new[] { 4, 46 });
            Rules[47] = new Rule(-23, new[] { 4, 47 });
            Rules[48] = new Rule(-24, new[] { 4, -30 });
            Rules[49] = new Rule(-30, new int[] { });
            Rules[50] = new Rule(-30, new[] { 42, -31, 41 });
            Rules[51] = new Rule(-31, new[] { -11, -32 });
            Rules[52] = new Rule(-32, new int[] { });
            Rules[53] = new Rule(-32, new[] { 37, -11, -32 });
            Rules[54] = new Rule(-25, new[] { 22, -11, 16, -13, 14 });
            Rules[55] = new Rule(-26, new[] { 15, 4, -33, 16, -13, 14 });
            Rules[56] = new Rule(-33, new[] { 23, -34, -35 });
            Rules[57] = new Rule(-34, new int[] { });
            Rules[58] = new Rule(-34, new[] { 24 });
            Rules[59] = new Rule(-35, new[] { -11, 61, -11 });
            Rules[60] = new Rule(-27, new[] { 12, 4, 13, -29, 16, -13, 14 });
            Rules[61] = new Rule(-28, new[] { 11, -11, 25, -13, -36, 14 });
            Rules[62] = new Rule(-36, new int[] { });
            Rules[63] = new Rule(-36, new[] { 26, -13 });
            Rules[64] = new Rule(-11, new[] { -37, -38 });
            Rules[65] = new Rule(-38, new int[] { });
            Rules[66] = new Rule(-38, new[] { 58, -37, -38 });
            Rules[67] = new Rule(-38, new[] { 59, -37, -38 });
            Rules[68] = new Rule(-38, new[] { 60, -37, -38 });
            Rules[69] = new Rule(-37, new[] { -39, -40 });
            Rules[70] = new Rule(-40, new int[] { });
            Rules[71] = new Rule(-40, new[] { 55, -39 });
            Rules[72] = new Rule(-40, new[] { 53, -39 });
            Rules[73] = new Rule(-40, new[] { 56, -39 });
            Rules[74] = new Rule(-40, new[] { 54, -39 });
            Rules[75] = new Rule(-40, new[] { 45, -39 });
            Rules[76] = new Rule(-40, new[] { 57, -39 });
            Rules[77] = new Rule(-39, new[] { -41, -42 });
            Rules[78] = new Rule(-42, new int[] { });
            Rules[79] = new Rule(-42, new[] { 50, -41, -42 });
            Rules[80] = new Rule(-42, new[] { 51, -41, -42 });
            Rules[81] = new Rule(-42, new[] { 52, -41, -42 });
            Rules[82] = new Rule(-41, new[] { -43, -44 });
            Rules[83] = new Rule(-44, new int[] { });
            Rules[84] = new Rule(-44, new[] { 49, -43, -44 });
            Rules[85] = new Rule(-44, new[] { 48, -43, -44 });
            Rules[86] = new Rule(-43, new[] { -45 });
            Rules[87] = new Rule(-43, new[] { 42, -11, 41 });
            Rules[88] = new Rule(-45, new[] { 5 });
            Rules[89] = new Rule(-45, new[] { 6 });
            Rules[90] = new Rule(-45, new[] { 7 });
            Rules[91] = new Rule(-45, new[] { 8 });
            Rules[92] = new Rule(-45, new[] { 9 });
            Rules[93] = new Rule(-45, new[] { 10 });
            Rules[94] = new Rule(-45, new[] { -29 });
            Rules[95] = new Rule(-29, new[] { 4, -46 });
            Rules[96] = new Rule(-46, new int[] { });
            Rules[97] = new Rule(-46, new[] { -47, -46 });
            Rules[98] = new Rule(-46, new[] { -48, -46 });
            Rules[99] = new Rule(-47, new[] { 36, 4 });
            Rules[100] = new Rule(-48, new[] { 44, -11, 43 });
        }

        protected override void Initialize()
        {
            InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
            InitStates(States);
            InitRules(Rules);
            InitNonTerminals(NonTerms);
        }

        protected override void DoAction(int action)
        {
#pragma warning disable 162, 1522
            switch (action)
            {
                case 2: // Program -> Declaration
#line 89 "grammar.y"
                {
                    CurrentSemanticValue = MakeProgram(ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 3: // Program -> Program, Declaration
#line 90 "grammar.y"
                {
                    CurrentSemanticValue =
                        AddToProgram(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 4: // Declaration -> SimpleDeclaration
#line 95 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 5: // Declaration -> RoutineDeclaration
#line 96 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 6: // SimpleDeclaration -> VariableDeclaration
#line 100 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 7: // SimpleDeclaration -> TypeDeclaration
#line 101 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 8: // VariableDeclaration -> VAR, IDENTIFIER, TypeTail, VariableInitializationTail
#line 105 "grammar.y"
                {
                    CurrentSemanticValue = MakeVariableDeclaration(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 9: // TypeTail -> COLON, Type
#line 110 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 10: // VariableInitializationTail -> IS, Expression
#line 115 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 11: // TypeDeclaration -> TYPE, IDENTIFIER, IS, Type
#line 120 "grammar.y"
                {
                    CurrentSemanticValue = MakeTypeDeclaration(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 12: // RoutineDeclaration -> ROUTINE, IDENTIFIER, OPEN_PARENTHESIS, Parameters, 
                    //                       CLOSE_PARENTHESIS, TypeTail, IS, Body, END
#line 125 "grammar.y"
                {
                    CurrentSemanticValue = MakeRoutineDeclaration(ValueStack[ValueStack.Depth - 8],
                        ValueStack[ValueStack.Depth - 6], ValueStack[ValueStack.Depth - 4],
                        ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 13: // Parameters -> /* empty */
#line 130 "grammar.y"
                {
                    CurrentSemanticValue = MakeParameters();
                }
#line default
                    break;
                case 14: // Parameters -> ParameterDeclaration, ParametersTail
#line 131 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeParameters(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 15: // ParametersTail -> /* empty */
#line 136 "grammar.y"
                {
                    CurrentSemanticValue = MakeParametersTail();
                }
#line default
                    break;
                case 16: // ParametersTail -> COMMA, ParameterDeclaration, ParametersTail
#line 137 "grammar.y"
                {
                    CurrentSemanticValue = AddToParametersTail(ValueStack[ValueStack.Depth - 1],
                        ValueStack[ValueStack.Depth - 3]);
                }
#line default
                    break;
                case 17: // ParameterDeclaration -> IDENTIFIER, COLON, Type
#line 142 "grammar.y"
                {
                    CurrentSemanticValue = MakeParameterDeclaration(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 18: // Type -> PrimitiveType
#line 147 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 19: // Type -> ArrayType
#line 148 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 20: // Type -> RecordType
#line 149 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 21: // Type -> IDENTIFIER
#line 150 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 22: // PrimitiveType -> INTEGER
#line 155 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 23: // PrimitiveType -> REAL
#line 156 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 24: // PrimitiveType -> BOOLEAN
#line 157 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 25: // PrimitiveType -> CHAR
#line 158 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 26: // PrimitiveType -> INTEGER_REF
#line 159 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 27: // PrimitiveType -> REAL_REF
#line 160 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 28: // PrimitiveType -> BOOLEAN_REF
#line 161 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 29: // PrimitiveType -> CHAR_REF
#line 162 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 30: // ArrayType -> ARRAY, OPEN_BRACKET, Expression, CLOSE_BRACKET, Type
#line 167 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeArrayType(ValueStack[ValueStack.Depth - 1], ValueStack[ValueStack.Depth - 3]);
                }
#line default
                    break;
                case 31: // RecordType -> RECORD, RecordVariableDeclarations, END
#line 172 "grammar.y"
                {
                    CurrentSemanticValue = MakeRecordType(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 32: // RecordVariableDeclarations -> /* empty */
#line 177 "grammar.y"
                {
                    CurrentSemanticValue = MakeVariableDeclarations();
                }
#line default
                    break;
                case 33: // RecordVariableDeclarations -> RecordVariableDeclarations, VariableDeclaration
#line 178 "grammar.y"
                {
                    CurrentSemanticValue = AddToVariableDeclarations(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 34: // Body -> /* empty */
#line 183 "grammar.y"
                {
                    CurrentSemanticValue = MakeBody();
                }
#line default
                    break;
                case 35: // Body -> Body, SimpleDeclaration
#line 184 "grammar.y"
                {
                    CurrentSemanticValue = AddSimpleDeclarationToBody(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 36: // Body -> Body, Statement
#line 185 "grammar.y"
                {
                    CurrentSemanticValue = AddStatementToBody(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 37: // Statement -> Assignment, SEMICOLON
#line 190 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 2];
                }
#line default
                    break;
                case 38: // Statement -> Increment, SEMICOLON
#line 191 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 2];
                }
#line default
                    break;
                case 39: // Statement -> Decrement, SEMICOLON
#line 192 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 2];
                }
#line default
                    break;
                case 40: // Statement -> RoutineCall, SEMICOLON
#line 193 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 2];
                }
#line default
                    break;
                case 41: // Statement -> WhileLoop
#line 194 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 42: // Statement -> ForLoop
#line 195 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 43: // Statement -> ForeachLoop
#line 196 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 44: // Statement -> IfStatement
#line 197 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 45: // Assignment -> ModifiablePrimary, ASSIGNMENT_OP, Expression
#line 202 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeAssignment(ValueStack[ValueStack.Depth - 3], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 46: // Increment -> IDENTIFIER, INCREMENT
#line 206 "grammar.y"
                {
                    CurrentSemanticValue = MakeIncrement(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 47: // Decrement -> IDENTIFIER, DECREMENT
#line 210 "grammar.y"
                {
                    CurrentSemanticValue = MakeDecrement(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 48: // RoutineCall -> IDENTIFIER, RoutineCallParameters
#line 215 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRoutineCall(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 49: // RoutineCallParameters -> /* empty */
#line 220 "grammar.y"
                {
                    CurrentSemanticValue = MakeRoutineCallParameters();
                }
#line default
                    break;
                case 50: // RoutineCallParameters -> OPEN_PARENTHESIS, Expressions, CLOSE_PARENTHESIS
#line 221 "grammar.y"
                {
                    CurrentSemanticValue = MakeRoutineCallParameters(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 51: // Expressions -> Expression, ExpressionsTail
#line 226 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeExpressions(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 52: // ExpressionsTail -> /* empty */
#line 231 "grammar.y"
                {
                    CurrentSemanticValue = MakeExpressionTail();
                }
#line default
                    break;
                case 53: // ExpressionsTail -> COMMA, Expression, ExpressionsTail
#line 232 "grammar.y"
                {
                    CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth - 1],
                        ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 54: // WhileLoop -> WHILE, Expression, LOOP, Body, END
#line 237 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeWhileLoop(ValueStack[ValueStack.Depth - 4], ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 55: // ForLoop -> FOR, IDENTIFIER, Range, LOOP, Body, END
#line 242 "grammar.y"
                {
                    CurrentSemanticValue = MakeForLoop(ValueStack[ValueStack.Depth - 5],
                        ValueStack[ValueStack.Depth - 4], ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 56: // Range -> IN, Reverse, RangeExpression
#line 247 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRange(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 57: // Reverse -> /* empty */
#line 252 "grammar.y"
                {
                    CurrentSemanticValue = null;
                }
#line default
                    break;
                case 58: // Reverse -> REVERSE
#line 253 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 59: // RangeExpression -> Expression, RANGE, Expression
#line 258 "grammar.y"
                {
                    CurrentSemanticValue = MakeRangeExpression(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 60: // ForeachLoop -> FOREACH, IDENTIFIER, FROM, ModifiablePrimary, LOOP, Body, END
#line 263 "grammar.y"
                {
                    CurrentSemanticValue = MakeForEachLoop(ValueStack[ValueStack.Depth - 6],
                        ValueStack[ValueStack.Depth - 4], ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 61: // IfStatement -> IF, Expression, THEN, Body, ElseTail, END
#line 268 "grammar.y"
                {
                    CurrentSemanticValue = MakeIfStatement(ValueStack[ValueStack.Depth - 5],
                        ValueStack[ValueStack.Depth - 3], ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 62: // ElseTail -> /* empty */
#line 273 "grammar.y"
                {
                    CurrentSemanticValue = null;
                }
#line default
                    break;
                case 63: // ElseTail -> ELSE, Body
#line 274 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 64: // Expression -> Relation, ExpressionTail
#line 279 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeExpression(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 65: // ExpressionTail -> /* empty */
#line 284 "grammar.y"
                {
                    CurrentSemanticValue = MakeExpressionTail();
                }
#line default
                    break;
                case 66: // ExpressionTail -> AND, Relation, ExpressionTail
#line 285 "grammar.y"
                {
                    CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 67: // ExpressionTail -> OR, Relation, ExpressionTail
#line 286 "grammar.y"
                {
                    CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 68: // ExpressionTail -> XOR, Relation, ExpressionTail
#line 287 "grammar.y"
                {
                    CurrentSemanticValue = AddToExpressionTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 69: // Relation -> Simple, RelationTail
#line 292 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelation(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 70: // RelationTail -> /* empty */
#line 297 "grammar.y"
                {
                    CurrentSemanticValue = MakeRelationTail();
                }
#line default
                    break;
                case 71: // RelationTail -> LESS, Simple
#line 298 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 72: // RelationTail -> LESS_EQUAL, Simple
#line 299 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 73: // RelationTail -> GREATER, Simple
#line 300 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 74: // RelationTail -> GREATER_EQUAL, Simple
#line 301 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 75: // RelationTail -> EQUAL, Simple
#line 302 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 76: // RelationTail -> NOT_EQUAL, Simple
#line 303 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeRelationTail(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 77: // Simple -> Factor, SimpleTail
#line 308 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeSimple(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 78: // SimpleTail -> /* empty */
#line 313 "grammar.y"
                {
                    CurrentSemanticValue = MakeSimpleTail();
                }
#line default
                    break;
                case 79: // SimpleTail -> MULTIPLY, Factor, SimpleTail
#line 314 "grammar.y"
                {
                    CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 80: // SimpleTail -> DIVIDE, Factor, SimpleTail
#line 315 "grammar.y"
                {
                    CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 81: // SimpleTail -> MOD, Factor, SimpleTail
#line 316 "grammar.y"
                {
                    CurrentSemanticValue = AddToSimpleTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 82: // Factor -> Summand, FactorTail
#line 321 "grammar.y"
                {
                    CurrentSemanticValue =
                        MakeFactor(ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 83: // FactorTail -> /* empty */
#line 326 "grammar.y"
                {
                    CurrentSemanticValue = MakeFactorTail();
                }
#line default
                    break;
                case 84: // FactorTail -> PLUS, Summand, FactorTail
#line 327 "grammar.y"
                {
                    CurrentSemanticValue = AddToFactorTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 85: // FactorTail -> MINUS, Summand, FactorTail
#line 328 "grammar.y"
                {
                    CurrentSemanticValue = AddToFactorTail(ValueStack[ValueStack.Depth - 3],
                        ValueStack[ValueStack.Depth - 2], ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 86: // Summand -> Primary
#line 333 "grammar.y"
                {
                    CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 87: // Summand -> OPEN_PARENTHESIS, Expression, CLOSE_PARENTHESIS
#line 334 "grammar.y"
                {
                    CurrentSemanticValue = MakeSummand(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
                case 88: // Primary -> INTEGER_LITERAL
#line 339 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 89: // Primary -> REAL_LITERAL
#line 340 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 90: // Primary -> CHAR_LITERAL
#line 341 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 91: // Primary -> STRING_LITERAL
#line 342 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 92: // Primary -> TRUE
#line 343 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 93: // Primary -> FALSE
#line 344 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 94: // Primary -> ModifiablePrimary
#line 345 "grammar.y"
                {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth - 1];
                }
#line default
                    break;
                case 95: // ModifiablePrimary -> IDENTIFIER, ModifiablePrimaryTail
#line 350 "grammar.y"
                {
                    CurrentSemanticValue = MakeModifiablePrimary(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 96: // ModifiablePrimaryTail -> /* empty */
#line 355 "grammar.y"
                {
                    CurrentSemanticValue = MakeModifiablePrimaryTail();
                }
#line default
                    break;
                case 97: // ModifiablePrimaryTail -> MemberAccess, ModifiablePrimaryTail
#line 356 "grammar.y"
                {
                    CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 98: // ModifiablePrimaryTail -> ArrayAccess, ModifiablePrimaryTail
#line 357 "grammar.y"
                {
                    CurrentSemanticValue = AddToModifiablePrimaryTail(ValueStack[ValueStack.Depth - 2],
                        ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 99: // MemberAccess -> DOT, IDENTIFIER
#line 361 "grammar.y"
                {
                    CurrentSemanticValue = MakeMemberAccess(ValueStack[ValueStack.Depth - 1]);
                }
#line default
                    break;
                case 100: // ArrayAccess -> OPEN_BRACKET, Expression, CLOSE_BRACKET
#line 365 "grammar.y"
                {
                    CurrentSemanticValue = MakeArrayAccess(ValueStack[ValueStack.Depth - 2]);
                }
#line default
                    break;
            }
#pragma warning restore 162, 1522
        }

        protected override string TerminalToString(int terminal)
        {
            if (_aliases != null && _aliases.TryGetValue(terminal, out var s))
                return s;
            if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
                return ((Tokens)terminal).ToString();
            return CharToString((char)terminal);
        }

#line 369 "grammar.y"
#line default
    }
}